
Toggle_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000260  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a9a  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000737  00000000  00000000  00000e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006a3  00000000  00000000  000015b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00001c54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e3  00000000  00000000  00001d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000059e  00000000  00000000  00002147  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000026e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 44 00 	call	0x88	; 0x88 <main>
  64:	0c 94 2e 01 	jmp	0x25c	; 0x25c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LED_init>:
 *  Author: Mahmoud Ayoub
 */ 
#include "LED.h"

void LED_init (uint8 PortNumber , uint8 PinNumber) {
	DIO_SetPinDirection (PortNumber , PinNumber , OUTPUT) ; 
  6c:	41 e0       	ldi	r20, 0x01	; 1
  6e:	0e 94 57 00 	call	0xae	; 0xae <DIO_SetPinDirection>
  72:	08 95       	ret

00000074 <LED_TOGGLE>:
}
void LED_TOGGLE (uint8 PortNumber , uint8 PinNumber) {
	DIO_TogglePinValue (PortNumber , PinNumber) ; 
  74:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_TogglePinValue>
  78:	08 95       	ret

0000007a <PB_init>:
 *  Author: Mahmoud Ayoub
 */ 
#include "PB.h"

void PB_init (uint8 PortNumber , uint8 PinNumber) {
	DIO_SetPinDirection (PortNumber , PinNumber , INPUT) ; 
  7a:	40 e0       	ldi	r20, 0x00	; 0
  7c:	0e 94 57 00 	call	0xae	; 0xae <DIO_SetPinDirection>
  80:	08 95       	ret

00000082 <PB_read>:
}
uint8 PB_read (uint8 PortNumber , uint8 PinNumber) {
	uint8 value ;
	value = DIO_GetPinValue (PortNumber , PinNumber) ;
  82:	0e 94 00 01 	call	0x200	; 0x200 <DIO_GetPinValue>
	return value ; 
  86:	08 95       	ret

00000088 <main>:


int main(void)
{
	uint8 pb_value ; 
	LED_init(portA , 0) ; 
  88:	60 e0       	ldi	r22, 0x00	; 0
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	0e 94 36 00 	call	0x6c	; 0x6c <LED_init>
	PB_init(portC , 0) ; 
  90:	60 e0       	ldi	r22, 0x00	; 0
  92:	82 e0       	ldi	r24, 0x02	; 2
  94:	0e 94 3d 00 	call	0x7a	; 0x7a <PB_init>
    while (1) 
    {
		// when pb is pressed , Toggle LED
		pb_value = PB_read(portC , 0) ; 
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	0e 94 41 00 	call	0x82	; 0x82 <PB_read>
		if (pb_value == 1) {
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	d1 f7       	brne	.-12     	; 0x98 <main+0x10>
			LED_TOGGLE(portA , 0) ; 
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	0e 94 3a 00 	call	0x74	; 0x74 <LED_TOGGLE>
  ac:	f5 cf       	rjmp	.-22     	; 0x98 <main+0x10>

000000ae <DIO_SetPinDirection>:
		case portC :
			PORTC_REG = Value ; 
		break;
		
		case portD :
			PORTD_REG = Value ; 
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	11 f1       	breq	.+68     	; 0xf6 <DIO_SetPinDirection+0x48>
  b2:	30 f0       	brcs	.+12     	; 0xc0 <DIO_SetPinDirection+0x12>
  b4:	82 30       	cpi	r24, 0x02	; 2
  b6:	d1 f1       	breq	.+116    	; 0x12c <DIO_SetPinDirection+0x7e>
  b8:	83 30       	cpi	r24, 0x03	; 3
  ba:	09 f4       	brne	.+2      	; 0xbe <DIO_SetPinDirection+0x10>
  bc:	52 c0       	rjmp	.+164    	; 0x162 <DIO_SetPinDirection+0xb4>
  be:	08 95       	ret
  c0:	41 30       	cpi	r20, 0x01	; 1
  c2:	59 f4       	brne	.+22     	; 0xda <DIO_SetPinDirection+0x2c>
  c4:	2a b3       	in	r18, 0x1a	; 26
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_SetPinDirection+0x22>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_SetPinDirection+0x1e>
  d4:	82 2b       	or	r24, r18
  d6:	8a bb       	out	0x1a, r24	; 26
  d8:	08 95       	ret
  da:	41 11       	cpse	r20, r1
  dc:	5c c0       	rjmp	.+184    	; 0x196 <DIO_SetPinDirection+0xe8>
  de:	2a b3       	in	r18, 0x1a	; 26
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_SetPinDirection+0x3c>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_SetPinDirection+0x38>
  ee:	80 95       	com	r24
  f0:	82 23       	and	r24, r18
  f2:	8a bb       	out	0x1a, r24	; 26
  f4:	08 95       	ret
  f6:	41 30       	cpi	r20, 0x01	; 1
  f8:	59 f4       	brne	.+22     	; 0x110 <DIO_SetPinDirection+0x62>
  fa:	27 b3       	in	r18, 0x17	; 23
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_SetPinDirection+0x58>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_SetPinDirection+0x54>
 10a:	82 2b       	or	r24, r18
 10c:	87 bb       	out	0x17, r24	; 23
 10e:	08 95       	ret
 110:	41 11       	cpse	r20, r1
 112:	41 c0       	rjmp	.+130    	; 0x196 <DIO_SetPinDirection+0xe8>
 114:	27 b3       	in	r18, 0x17	; 23
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_SetPinDirection+0x72>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_SetPinDirection+0x6e>
 124:	80 95       	com	r24
 126:	82 23       	and	r24, r18
 128:	87 bb       	out	0x17, r24	; 23
 12a:	08 95       	ret
 12c:	41 30       	cpi	r20, 0x01	; 1
 12e:	59 f4       	brne	.+22     	; 0x146 <DIO_SetPinDirection+0x98>
 130:	24 b3       	in	r18, 0x14	; 20
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_SetPinDirection+0x8e>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_SetPinDirection+0x8a>
 140:	82 2b       	or	r24, r18
 142:	84 bb       	out	0x14, r24	; 20
 144:	08 95       	ret
 146:	41 11       	cpse	r20, r1
 148:	26 c0       	rjmp	.+76     	; 0x196 <DIO_SetPinDirection+0xe8>
 14a:	24 b3       	in	r18, 0x14	; 20
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_SetPinDirection+0xa8>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_SetPinDirection+0xa4>
 15a:	80 95       	com	r24
 15c:	82 23       	and	r24, r18
 15e:	84 bb       	out	0x14, r24	; 20
 160:	08 95       	ret
 162:	41 30       	cpi	r20, 0x01	; 1
 164:	59 f4       	brne	.+22     	; 0x17c <DIO_SetPinDirection+0xce>
 166:	21 b3       	in	r18, 0x11	; 17
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_SetPinDirection+0xc4>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_SetPinDirection+0xc0>
 176:	82 2b       	or	r24, r18
 178:	81 bb       	out	0x11, r24	; 17
 17a:	08 95       	ret
 17c:	41 11       	cpse	r20, r1
 17e:	0b c0       	rjmp	.+22     	; 0x196 <DIO_SetPinDirection+0xe8>
 180:	21 b3       	in	r18, 0x11	; 17
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_SetPinDirection+0xde>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_SetPinDirection+0xda>
 190:	80 95       	com	r24
 192:	82 23       	and	r24, r18
 194:	81 bb       	out	0x11, r24	; 17
 196:	08 95       	ret

00000198 <DIO_TogglePinValue>:
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	89 f0       	breq	.+34     	; 0x1be <DIO_TogglePinValue+0x26>
 19c:	28 f0       	brcs	.+10     	; 0x1a8 <DIO_TogglePinValue+0x10>
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	c9 f0       	breq	.+50     	; 0x1d4 <DIO_TogglePinValue+0x3c>
 1a2:	83 30       	cpi	r24, 0x03	; 3
 1a4:	11 f1       	breq	.+68     	; 0x1ea <DIO_TogglePinValue+0x52>
 1a6:	08 95       	ret
 1a8:	2b b3       	in	r18, 0x1b	; 27
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_TogglePinValue+0x1c>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_TogglePinValue+0x18>
 1b8:	82 27       	eor	r24, r18
 1ba:	8b bb       	out	0x1b, r24	; 27
 1bc:	08 95       	ret
 1be:	28 b3       	in	r18, 0x18	; 24
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_TogglePinValue+0x32>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_TogglePinValue+0x2e>
 1ce:	82 27       	eor	r24, r18
 1d0:	88 bb       	out	0x18, r24	; 24
 1d2:	08 95       	ret
 1d4:	25 b3       	in	r18, 0x15	; 21
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_TogglePinValue+0x48>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	6a 95       	dec	r22
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_TogglePinValue+0x44>
 1e4:	82 27       	eor	r24, r18
 1e6:	85 bb       	out	0x15, r24	; 21
 1e8:	08 95       	ret
 1ea:	22 b3       	in	r18, 0x12	; 18
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_TogglePinValue+0x5e>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_TogglePinValue+0x5a>
 1fa:	82 27       	eor	r24, r18
 1fc:	82 bb       	out	0x12, r24	; 18
 1fe:	08 95       	ret

00000200 <DIO_GetPinValue>:
	}	
}

uint8 DIO_GetPinValue (uint8 PortNumber , uint8 PinNumber) {
	uint8 value = 0 ; 
	switch (PortNumber) {
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	79 f0       	breq	.+30     	; 0x222 <DIO_GetPinValue+0x22>
 204:	28 f0       	brcs	.+10     	; 0x210 <DIO_GetPinValue+0x10>
 206:	82 30       	cpi	r24, 0x02	; 2
 208:	a9 f0       	breq	.+42     	; 0x234 <DIO_GetPinValue+0x34>
 20a:	83 30       	cpi	r24, 0x03	; 3
 20c:	e1 f0       	breq	.+56     	; 0x246 <DIO_GetPinValue+0x46>
 20e:	24 c0       	rjmp	.+72     	; 0x258 <DIO_GetPinValue+0x58>
		case portA : 
			value = (PINA_REG >> PinNumber) & 0x01 ; 	
 210:	89 b3       	in	r24, 0x19	; 25
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_GetPinValue+0x1a>
 216:	95 95       	asr	r25
 218:	87 95       	ror	r24
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_GetPinValue+0x16>
 21e:	81 70       	andi	r24, 0x01	; 1
		break;
 220:	08 95       	ret
		
		case portB :
			value = (PINB_REG >> PinNumber) & 0x01 ;
 222:	86 b3       	in	r24, 0x16	; 22
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_GetPinValue+0x2c>
 228:	95 95       	asr	r25
 22a:	87 95       	ror	r24
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_GetPinValue+0x28>
 230:	81 70       	andi	r24, 0x01	; 1
		break;
 232:	08 95       	ret
		
		case portC :
			value = (PINC_REG >> PinNumber) & 0x01 ;
 234:	83 b3       	in	r24, 0x13	; 19
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_GetPinValue+0x3e>
 23a:	95 95       	asr	r25
 23c:	87 95       	ror	r24
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_GetPinValue+0x3a>
 242:	81 70       	andi	r24, 0x01	; 1
		break;
 244:	08 95       	ret

		case portD :
			value = (PIND_REG >> PinNumber) & 0x01 ;
 246:	80 b3       	in	r24, 0x10	; 16
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_GetPinValue+0x50>
 24c:	95 95       	asr	r25
 24e:	87 95       	ror	r24
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_GetPinValue+0x4c>
 254:	81 70       	andi	r24, 0x01	; 1
		break;
 256:	08 95       	ret
		break;
	}	
}

uint8 DIO_GetPinValue (uint8 PortNumber , uint8 PinNumber) {
	uint8 value = 0 ; 
 258:	80 e0       	ldi	r24, 0x00	; 0
		case portD :
			value = (PIND_REG >> PinNumber) & 0x01 ;
		break;
	}
	return value ; 
}
 25a:	08 95       	ret

0000025c <_exit>:
 25c:	f8 94       	cli

0000025e <__stop_program>:
 25e:	ff cf       	rjmp	.-2      	; 0x25e <__stop_program>
