
Blink_LED_with_Timer_INT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000320  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000394  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ba8  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d0  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000914  00000000  00000000  00001888  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  0000219c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000481  00000000  00000000  00002378  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000614  00000000  00000000  000027f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00002e0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  74:	0c 94 8e 01 	jmp	0x31c	; 0x31c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <LED_init>:

void LED_init (uint8 PortNumber , uint8 PinNumber) {
	DIO_SetPinDirection (PortNumber , PinNumber , OUTPUT) ; 
}
void LED_ON (uint8 PortNumber , uint8 PinNumber) {
	DIO_SetPinValue (PortNumber , PinNumber , HIGH) ;
  7c:	41 e0       	ldi	r20, 0x01	; 1
  7e:	0e 94 5e 00 	call	0xbc	; 0xbc <DIO_SetPinDirection>
  82:	08 95       	ret

00000084 <LED_OFF>:
}
void LED_OFF (uint8 PortNumber , uint8 PinNumber) {
	DIO_SetPinValue (PortNumber , PinNumber , LOW) ;
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPinValue>
  8a:	08 95       	ret

0000008c <LED_TOGGLE>:
}
void LED_TOGGLE (void) {
	TOGGLE_BIT(PORTA_REG , 0) ; 
  8c:	9b b3       	in	r25, 0x1b	; 27
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	89 27       	eor	r24, r25
  92:	8b bb       	out	0x1b, r24	; 27
  94:	08 95       	ret

00000096 <main>:
#include "D:\Sprints iCamp\5- MCU interfacing\Blink_LED_with_Timer_INT\Blink_LED_with_Timer_INT\MCAL\INTERRUPT\Interrupt.h"

int main()
{
	
	LED_init(portA , 0) ; 
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	0e 94 3e 00 	call	0x7c	; 0x7c <LED_init>
	LED_OFF(portA , 0) ; 
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	0e 94 42 00 	call	0x84	; 0x84 <LED_OFF>
	TIMER1_init() ; 
  a6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <TIMER1_init>
	INT_Timer_Enable() ; 
  aa:	0e 94 4c 01 	call	0x298	; 0x298 <INT_Timer_Enable>
	INT_global_Enable() ; 
  ae:	0e 94 48 01 	call	0x290	; 0x290 <INT_global_Enable>
	cb_func(LED_TOGGLE) ;  
  b2:	86 e4       	ldi	r24, 0x46	; 70
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <cb_func>
  ba:	ff cf       	rjmp	.-2      	; 0xba <main+0x24>

000000bc <DIO_SetPinDirection>:
 *  Author: Mahmoud Ayoub
 */ 
#include "DIO_Config.h"

void DIO_SetPinDirection (uint8 PortNumber , uint8 PinNumber , uint8 Direction) {
	switch (PortNumber) {
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	11 f1       	breq	.+68     	; 0x104 <DIO_SetPinDirection+0x48>
  c0:	30 f0       	brcs	.+12     	; 0xce <DIO_SetPinDirection+0x12>
  c2:	82 30       	cpi	r24, 0x02	; 2
  c4:	d1 f1       	breq	.+116    	; 0x13a <DIO_SetPinDirection+0x7e>
  c6:	83 30       	cpi	r24, 0x03	; 3
  c8:	09 f4       	brne	.+2      	; 0xcc <DIO_SetPinDirection+0x10>
  ca:	52 c0       	rjmp	.+164    	; 0x170 <DIO_SetPinDirection+0xb4>
  cc:	08 95       	ret
		case portA :
			if (Direction == OUTPUT) {
  ce:	41 30       	cpi	r20, 0x01	; 1
  d0:	59 f4       	brne	.+22     	; 0xe8 <DIO_SetPinDirection+0x2c>
				SET_BIT(DDRA_REG,PinNumber) ; 
  d2:	2a b3       	in	r18, 0x1a	; 26
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_SetPinDirection+0x22>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_SetPinDirection+0x1e>
  e2:	82 2b       	or	r24, r18
  e4:	8a bb       	out	0x1a, r24	; 26
  e6:	08 95       	ret
			}
			else if (Direction == INPUT) {
  e8:	41 11       	cpse	r20, r1
  ea:	5c c0       	rjmp	.+184    	; 0x1a4 <DIO_SetPinDirection+0xe8>
				CLEAR_BIT(DDRA_REG,PinNumber) ; 
  ec:	2a b3       	in	r18, 0x1a	; 26
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_SetPinDirection+0x3c>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_SetPinDirection+0x38>
  fc:	80 95       	com	r24
  fe:	82 23       	and	r24, r18
 100:	8a bb       	out	0x1a, r24	; 26
 102:	08 95       	ret
			}
		break;
			
		case portB :
			if (Direction == OUTPUT) {
 104:	41 30       	cpi	r20, 0x01	; 1
 106:	59 f4       	brne	.+22     	; 0x11e <DIO_SetPinDirection+0x62>
				SET_BIT(DDRB_REG,PinNumber) ;
 108:	27 b3       	in	r18, 0x17	; 23
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_SetPinDirection+0x58>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_SetPinDirection+0x54>
 118:	82 2b       	or	r24, r18
 11a:	87 bb       	out	0x17, r24	; 23
 11c:	08 95       	ret
			}
			else if (Direction == INPUT) {
 11e:	41 11       	cpse	r20, r1
 120:	41 c0       	rjmp	.+130    	; 0x1a4 <DIO_SetPinDirection+0xe8>
				CLEAR_BIT(DDRB_REG,PinNumber) ;
 122:	27 b3       	in	r18, 0x17	; 23
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_SetPinDirection+0x72>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_SetPinDirection+0x6e>
 132:	80 95       	com	r24
 134:	82 23       	and	r24, r18
 136:	87 bb       	out	0x17, r24	; 23
 138:	08 95       	ret
			}
		break;
		
		case portC :
			if (Direction == OUTPUT) {
 13a:	41 30       	cpi	r20, 0x01	; 1
 13c:	59 f4       	brne	.+22     	; 0x154 <DIO_SetPinDirection+0x98>
				SET_BIT(DDRC_REG,PinNumber) ;
 13e:	24 b3       	in	r18, 0x14	; 20
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_SetPinDirection+0x8e>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_SetPinDirection+0x8a>
 14e:	82 2b       	or	r24, r18
 150:	84 bb       	out	0x14, r24	; 20
 152:	08 95       	ret
			}
			else if (Direction == INPUT) {
 154:	41 11       	cpse	r20, r1
 156:	26 c0       	rjmp	.+76     	; 0x1a4 <DIO_SetPinDirection+0xe8>
				CLEAR_BIT(DDRC_REG,PinNumber) ;
 158:	24 b3       	in	r18, 0x14	; 20
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_SetPinDirection+0xa8>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_SetPinDirection+0xa4>
 168:	80 95       	com	r24
 16a:	82 23       	and	r24, r18
 16c:	84 bb       	out	0x14, r24	; 20
 16e:	08 95       	ret
			}
			break;	
			
		case portD :
			if (Direction == OUTPUT) {
 170:	41 30       	cpi	r20, 0x01	; 1
 172:	59 f4       	brne	.+22     	; 0x18a <DIO_SetPinDirection+0xce>
				SET_BIT(DDRD_REG,PinNumber) ;
 174:	21 b3       	in	r18, 0x11	; 17
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_SetPinDirection+0xc4>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_SetPinDirection+0xc0>
 184:	82 2b       	or	r24, r18
 186:	81 bb       	out	0x11, r24	; 17
 188:	08 95       	ret
			}
			else if (Direction == INPUT) {
 18a:	41 11       	cpse	r20, r1
 18c:	0b c0       	rjmp	.+22     	; 0x1a4 <DIO_SetPinDirection+0xe8>
				CLEAR_BIT(DDRD_REG,PinNumber) ;
 18e:	21 b3       	in	r18, 0x11	; 17
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_SetPinDirection+0xde>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_SetPinDirection+0xda>
 19e:	80 95       	com	r24
 1a0:	82 23       	and	r24, r18
 1a2:	81 bb       	out	0x11, r24	; 17
 1a4:	08 95       	ret

000001a6 <DIO_SetPinValue>:
		break;	
	}
}

void DIO_SetPinValue (uint8 PortNumber , uint8 PinNumber , uint8 Value) {
	switch (PortNumber) {
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	11 f1       	breq	.+68     	; 0x1ee <DIO_SetPinValue+0x48>
 1aa:	30 f0       	brcs	.+12     	; 0x1b8 <DIO_SetPinValue+0x12>
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	d1 f1       	breq	.+116    	; 0x224 <DIO_SetPinValue+0x7e>
 1b0:	83 30       	cpi	r24, 0x03	; 3
 1b2:	09 f4       	brne	.+2      	; 0x1b6 <DIO_SetPinValue+0x10>
 1b4:	52 c0       	rjmp	.+164    	; 0x25a <DIO_SetPinValue+0xb4>
 1b6:	08 95       	ret
		case portA :
			if (Value == 1) {
 1b8:	41 30       	cpi	r20, 0x01	; 1
 1ba:	59 f4       	brne	.+22     	; 0x1d2 <DIO_SetPinValue+0x2c>
				SET_BIT(PORTA_REG,PinNumber) ;
 1bc:	2b b3       	in	r18, 0x1b	; 27
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_SetPinValue+0x22>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_SetPinValue+0x1e>
 1cc:	82 2b       	or	r24, r18
 1ce:	8b bb       	out	0x1b, r24	; 27
 1d0:	08 95       	ret
			}
			else if (Value == 0) {
 1d2:	41 11       	cpse	r20, r1
 1d4:	5c c0       	rjmp	.+184    	; 0x28e <DIO_SetPinValue+0xe8>
				CLEAR_BIT(PORTA_REG,PinNumber) ;
 1d6:	2b b3       	in	r18, 0x1b	; 27
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_SetPinValue+0x3c>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_SetPinValue+0x38>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	8b bb       	out	0x1b, r24	; 27
 1ec:	08 95       	ret
			}
		break;
		
		case portB :
			if (Value == 1) {
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	59 f4       	brne	.+22     	; 0x208 <DIO_SetPinValue+0x62>
				SET_BIT(PORTB_REG,PinNumber) ;
 1f2:	28 b3       	in	r18, 0x18	; 24
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_SetPinValue+0x58>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_SetPinValue+0x54>
 202:	82 2b       	or	r24, r18
 204:	88 bb       	out	0x18, r24	; 24
 206:	08 95       	ret
			}
			else if (Value == 0) {
 208:	41 11       	cpse	r20, r1
 20a:	41 c0       	rjmp	.+130    	; 0x28e <DIO_SetPinValue+0xe8>
				CLEAR_BIT(PORTB_REG,PinNumber) ;
 20c:	28 b3       	in	r18, 0x18	; 24
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_SetPinValue+0x72>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_SetPinValue+0x6e>
 21c:	80 95       	com	r24
 21e:	82 23       	and	r24, r18
 220:	88 bb       	out	0x18, r24	; 24
 222:	08 95       	ret
			}
		break;
		
		case portC :
			if (Value == 1) {
 224:	41 30       	cpi	r20, 0x01	; 1
 226:	59 f4       	brne	.+22     	; 0x23e <DIO_SetPinValue+0x98>
				SET_BIT(PORTC_REG,PinNumber) ;
 228:	25 b3       	in	r18, 0x15	; 21
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_SetPinValue+0x8e>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_SetPinValue+0x8a>
 238:	82 2b       	or	r24, r18
 23a:	85 bb       	out	0x15, r24	; 21
 23c:	08 95       	ret
			}
			else if (Value == 0) {
 23e:	41 11       	cpse	r20, r1
 240:	26 c0       	rjmp	.+76     	; 0x28e <DIO_SetPinValue+0xe8>
				CLEAR_BIT(PORTC_REG,PinNumber) ;
 242:	25 b3       	in	r18, 0x15	; 21
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_SetPinValue+0xa8>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_SetPinValue+0xa4>
 252:	80 95       	com	r24
 254:	82 23       	and	r24, r18
 256:	85 bb       	out	0x15, r24	; 21
 258:	08 95       	ret
			}
		break;
		
		case portD :
			if (Value == 1) {
 25a:	41 30       	cpi	r20, 0x01	; 1
 25c:	59 f4       	brne	.+22     	; 0x274 <DIO_SetPinValue+0xce>
				SET_BIT(PORTD_REG,PinNumber) ;
 25e:	22 b3       	in	r18, 0x12	; 18
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_SetPinValue+0xc4>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_SetPinValue+0xc0>
 26e:	82 2b       	or	r24, r18
 270:	82 bb       	out	0x12, r24	; 18
 272:	08 95       	ret
			}
			else if (Value == 0) {
 274:	41 11       	cpse	r20, r1
 276:	0b c0       	rjmp	.+22     	; 0x28e <DIO_SetPinValue+0xe8>
				CLEAR_BIT(PORTD_REG,PinNumber) ;
 278:	22 b3       	in	r18, 0x12	; 18
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_SetPinValue+0xde>
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_SetPinValue+0xda>
 288:	80 95       	com	r24
 28a:	82 23       	and	r24, r18
 28c:	82 bb       	out	0x12, r24	; 18
 28e:	08 95       	ret

00000290 <INT_global_Enable>:
 */ 
#include "Interrupt.h"
void (*gpfun) (void) ;          // global pointer to function

void INT_global_Enable (void) {
	SET_BIT (Status_REG , 7) ; 
 290:	8f b7       	in	r24, 0x3f	; 63
 292:	80 68       	ori	r24, 0x80	; 128
 294:	8f bf       	out	0x3f, r24	; 63
 296:	08 95       	ret

00000298 <INT_Timer_Enable>:
}
void INT_Timer_Enable (void) {
	SET_BIT (TC1_INTMask_REG , 2) ; 
 298:	89 b7       	in	r24, 0x39	; 57
 29a:	84 60       	ori	r24, 0x04	; 4
 29c:	89 bf       	out	0x39, r24	; 57
 29e:	08 95       	ret

000002a0 <__vector_9>:
}
void __vector_9(void)         // Timer1 ISR
{
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	2f 93       	push	r18
 2ac:	3f 93       	push	r19
 2ae:	4f 93       	push	r20
 2b0:	5f 93       	push	r21
 2b2:	6f 93       	push	r22
 2b4:	7f 93       	push	r23
 2b6:	8f 93       	push	r24
 2b8:	9f 93       	push	r25
 2ba:	af 93       	push	r26
 2bc:	bf 93       	push	r27
 2be:	ef 93       	push	r30
 2c0:	ff 93       	push	r31
	
	gpfun() ;
 2c2:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2c6:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2ca:	09 95       	icall
	TIMER1_reset() ;
 2cc:	0e 94 86 01 	call	0x30c	; 0x30c <TIMER1_reset>
}
 2d0:	ff 91       	pop	r31
 2d2:	ef 91       	pop	r30
 2d4:	bf 91       	pop	r27
 2d6:	af 91       	pop	r26
 2d8:	9f 91       	pop	r25
 2da:	8f 91       	pop	r24
 2dc:	7f 91       	pop	r23
 2de:	6f 91       	pop	r22
 2e0:	5f 91       	pop	r21
 2e2:	4f 91       	pop	r20
 2e4:	3f 91       	pop	r19
 2e6:	2f 91       	pop	r18
 2e8:	0f 90       	pop	r0
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	0f 90       	pop	r0
 2ee:	1f 90       	pop	r1
 2f0:	18 95       	reti

000002f2 <cb_func>:

void cb_func (void (*led_p_fun) (void)) {
	gpfun = led_p_fun ; 
 2f2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2f6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 2fa:	08 95       	ret

000002fc <TIMER1_init>:
	TC1_Data_L_REG = 0x83 ;  
}
uint8 TIMER1_end (void) {
	while((TC1_Status_REG & (1<<2)) == 0);	// wait till the overflow of A flag is SET
	return 1 ; 
}
 2fc:	8e b5       	in	r24, 0x2e	; 46
 2fe:	82 60       	ori	r24, 0x02	; 2
 300:	8e bd       	out	0x2e, r24	; 46
 302:	8d e6       	ldi	r24, 0x6D	; 109
 304:	8d bd       	out	0x2d, r24	; 45
 306:	83 e8       	ldi	r24, 0x83	; 131
 308:	8c bd       	out	0x2c, r24	; 44
 30a:	08 95       	ret

0000030c <TIMER1_reset>:
void TIMER1_reset (void) {
	TC1_Data_H_REG = 0x6D ;
 30c:	8d e6       	ldi	r24, 0x6D	; 109
 30e:	8d bd       	out	0x2d, r24	; 45
	TC1_Data_L_REG = 0x83 ;
 310:	83 e8       	ldi	r24, 0x83	; 131
 312:	8c bd       	out	0x2c, r24	; 44
	SET_BIT (TC1_Status_REG , 2) ;   //clear timer1 overflow flag
 314:	88 b7       	in	r24, 0x38	; 56
 316:	84 60       	ori	r24, 0x04	; 4
 318:	88 bf       	out	0x38, r24	; 56
 31a:	08 95       	ret

0000031c <_exit>:
 31c:	f8 94       	cli

0000031e <__stop_program>:
 31e:	ff cf       	rjmp	.-2      	; 0x31e <__stop_program>
