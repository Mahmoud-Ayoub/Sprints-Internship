
I2C Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000754  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d4  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d2  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  00001308  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bb  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d9  00000000  00000000  000017ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00001884  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2C_Slave_init>:
	// Wait till complete TWDR byte transmitted
	while (!(TWCR & (1 << TWINT))) ;
	
	// Check for the acknowledgment
	while ((TWSR & 0xF8) != S_DATA_TRANSMIT_ACK) ;	
}
  6c:	82 b9       	out	0x02, r24	; 2
  6e:	08 95       	ret

00000070 <I2C_Slave_match_read>:
  70:	06 c0       	rjmp	.+12     	; 0x7e <I2C_Slave_match_read+0xe>
  72:	86 b7       	in	r24, 0x36	; 54
  74:	84 6c       	ori	r24, 0xC4	; 196
  76:	86 bf       	out	0x36, r24	; 54
  78:	06 b6       	in	r0, 0x36	; 54
  7a:	07 fe       	sbrs	r0, 7
  7c:	fd cf       	rjmp	.-6      	; 0x78 <I2C_Slave_match_read+0x8>
  7e:	81 b1       	in	r24, 0x01	; 1
  80:	88 7f       	andi	r24, 0xF8	; 248
  82:	80 36       	cpi	r24, 0x60	; 96
  84:	b1 f7       	brne	.-20     	; 0x72 <I2C_Slave_match_read+0x2>
  86:	08 95       	ret

00000088 <I2C_Slave_read_data>:
inputs		: none
outputs		: none
*/
unsigned char I2C_Slave_read_data (void) {
	// Clear TWI interrupt flag,Enable TWI
	TWCR |= (1 << TWINT) | (1 << TWEA) | (1 << TWEN) ;
  88:	86 b7       	in	r24, 0x36	; 54
  8a:	84 6c       	ori	r24, 0xC4	; 196
  8c:	86 bf       	out	0x36, r24	; 54
	
	// Wait till complete TWDR byte transmitted
	while (!(TWCR & (1 << TWINT))) ;
  8e:	06 b6       	in	r0, 0x36	; 54
  90:	07 fe       	sbrs	r0, 7
  92:	fd cf       	rjmp	.-6      	; 0x8e <I2C_Slave_read_data+0x6>
	
	// Check for the acknowledgment
	while ((TWSR & 0xF8) != S_DATA_RECEIVE_ACK) ;
  94:	81 b1       	in	r24, 0x01	; 1
  96:	88 7f       	andi	r24, 0xF8	; 248
  98:	80 38       	cpi	r24, 0x80	; 128
  9a:	e1 f7       	brne	.-8      	; 0x94 <I2C_Slave_read_data+0xc>
	
	return TWDR ;	
  9c:	83 b1       	in	r24, 0x03	; 3
}
  9e:	08 95       	ret

000000a0 <main>:
#define PORTB_REG			(*((volatile unsigned char*)0x38))
#define PINB_REG			(*((volatile unsigned char*)0x36))

int main(void)
{
	DDRB_REG = 0xFF ;
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	87 bb       	out	0x17, r24	; 23
	I2C_Slave_init(0x10) ;  // Function to initialize slave
  a4:	80 e1       	ldi	r24, 0x10	; 16
  a6:	0e 94 36 00 	call	0x6c	; 0x6c <I2C_Slave_init>
	while(1)
	{
		I2C_Slave_match_read() ; 
  aa:	0e 94 38 00 	call	0x70	; 0x70 <I2C_Slave_match_read>
		PORTB_REG = I2C_Slave_read_data() ; // Function to read data
  ae:	0e 94 44 00 	call	0x88	; 0x88 <I2C_Slave_read_data>
  b2:	88 bb       	out	0x18, r24	; 24
  b4:	fa cf       	rjmp	.-12     	; 0xaa <main+0xa>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
