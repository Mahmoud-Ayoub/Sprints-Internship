
Master_sender.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cf7  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000923  00000000  00000000  0000116f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006b4  00000000  00000000  00001a92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b8  00000000  00000000  00002148  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000531  00000000  00000000  00002300  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000462  00000000  00000000  00002831  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00002c93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
   8:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
   c:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  10:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  14:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  18:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  1c:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  20:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  24:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  28:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  2c:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  30:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  34:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  38:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  3c:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  40:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  44:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  48:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  4c:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  50:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  54:	b2 00       	.word	0x00b2	; ????
  56:	b6 00       	.word	0x00b6	; ????
  58:	ba 00       	.word	0x00ba	; ????
  5a:	be 00       	.word	0x00be	; ????
  5c:	c2 00       	.word	0x00c2	; ????
  5e:	c7 00       	.word	0x00c7	; ????
  60:	cc 00       	.word	0x00cc	; ????

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61
  6e:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  72:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <_exit>

00000076 <__bad_interrupt>:
  76:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007a <SPI_Sender_init>:
Description : function to initialize MCU as sender
inputs		: clock for master initialization 
outputs		: none
*/
void SPI_Sender_init (EN_SCK clock) {
	SPI_Master_init(clock) ; 
  7a:	0e 94 a2 00 	call	0x144	; 0x144 <SPI_Master_init>
  7e:	08 95       	ret

00000080 <SPI_Sender_Send_Char>:
Description : function to send char over SPI
inputs		: char to be sent
outputs		: none
*/
void SPI_Sender_Send_Char (unsigned char data) {
	SPI_Transmit_Char(data) ; 
  80:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <SPI_Transmit_Char>
  84:	08 95       	ret

00000086 <Terminal_init>:
Description : function to send string to terminal
inputs		: string to be sent using UART
outputs		: none
*/
void Terminal_Send_String (unsigned char* str) {
	UART_Transmit_String(str) ; 
  86:	0e 94 d6 00 	call	0x1ac	; 0x1ac <UART_init>
  8a:	08 95       	ret

0000008c <Terminal_Send_Char>:
  8c:	0e 94 25 01 	call	0x24a	; 0x24a <UART_Transmit_Char>
  90:	08 95       	ret

00000092 <Terminal_Receive_Char>:
Description : function to receive data to terminal
inputs		: none
outputs		: data received on UART
*/
unsigned char Terminal_Receive_Char (void) {
	return UART_Receive_Char() ; 
  92:	0e 94 29 01 	call	0x252	; 0x252 <UART_Receive_Char>
  96:	08 95       	ret

00000098 <main>:

#include "./HAL/Terminal/Terminal.h"
#include "./HAL/SPI_sender/SPI_sender.h"

int main(void)
{
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
  a0:	da 95       	dec	r29
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	f8 94       	cli
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	cd bf       	out	0x3d, r28	; 61
	unsigned char key ;
	unsigned char message[256] =  {0} ;			// array of characters for user message
  ac:	fe 01       	movw	r30, r28
  ae:	31 96       	adiw	r30, 0x01	; 1
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	df 01       	movw	r26, r30
  b6:	9c 01       	movw	r18, r24
  b8:	1d 92       	st	X+, r1
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	30 40       	sbci	r19, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x20>
	unsigned char counter = 0 ;
	unsigned char loop_iterator = 0 ;
	
	// Terminal initialization
	Terminal_init(9600 , _1_BIT , _8_BITS) ;
  c0:	43 e0       	ldi	r20, 0x03	; 3
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	80 e8       	ldi	r24, 0x80	; 128
  c6:	95 e2       	ldi	r25, 0x25	; 37
  c8:	0e 94 43 00 	call	0x86	; 0x86 <Terminal_init>
	
	// SPI Sender initialization 
	SPI_Sender_init(Fosc_2) ;
  cc:	84 e0       	ldi	r24, 0x04	; 4
  ce:	0e 94 3d 00 	call	0x7a	; 0x7a <SPI_Sender_init>

int main(void)
{
	unsigned char key ;
	unsigned char message[256] =  {0} ;			// array of characters for user message
	unsigned char counter = 0 ;
  d2:	00 e0       	ldi	r16, 0x00	; 0
  d4:	7e 01       	movw	r14, r28
  d6:	3b e0       	ldi	r19, 0x0B	; 11
  d8:	e3 0e       	add	r14, r19
  da:	f1 1c       	adc	r15, r1
	// SPI Sender initialization 
	SPI_Sender_init(Fosc_2) ;

    while (1) 
    {
		key = Terminal_Receive_Char() ;
  dc:	0e 94 49 00 	call	0x92	; 0x92 <Terminal_Receive_Char>
  e0:	18 2f       	mov	r17, r24
		Terminal_Send_Char(key) ;
  e2:	0e 94 46 00 	call	0x8c	; 0x8c <Terminal_Send_Char>
		
		if ( key != 0x0D) {		// user doesn't press "Enter" key to finish entering message yet
  e6:	1d 30       	cpi	r17, 0x0D	; 13
  e8:	41 f1       	breq	.+80     	; 0x13a <main+0xa2>
			message[counter] = key ;
  ea:	e1 e0       	ldi	r30, 0x01	; 1
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	ec 0f       	add	r30, r28
  f0:	fd 1f       	adc	r31, r29
  f2:	e0 0f       	add	r30, r16
  f4:	f1 1d       	adc	r31, r1
  f6:	10 83       	st	Z, r17
			counter ++ ;
  f8:	0f 5f       	subi	r16, 0xFF	; 255
		}
		if (key == 32) {		// user entered a space 
  fa:	10 32       	cpi	r17, 0x20	; 32
  fc:	79 f7       	brne	.-34     	; 0xdc <main+0x44>
			SPI_Sender_Send_Char(key) ; 
  fe:	80 e2       	ldi	r24, 0x20	; 32
 100:	0e 94 40 00 	call	0x80	; 0x80 <SPI_Sender_Send_Char>
 104:	eb cf       	rjmp	.-42     	; 0xdc <main+0x44>
		}
		else if (key == 0x0D) {
			if (counter <= 255) {
				SPI_Sender_Send_Char(0x0D) ;
				for (loop_iterator = 0 ; loop_iterator <= counter ; loop_iterator ++) {	// send string over SPI char by char
					SPI_Sender_Send_Char(message[loop_iterator]) ;
 106:	e1 e0       	ldi	r30, 0x01	; 1
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	ec 0f       	add	r30, r28
 10c:	fd 1f       	adc	r31, r29
 10e:	e1 0f       	add	r30, r17
 110:	f1 1d       	adc	r31, r1
 112:	80 81       	ld	r24, Z
 114:	0e 94 40 00 	call	0x80	; 0x80 <SPI_Sender_Send_Char>
					Terminal_Send_Char(0) ;
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	0e 94 46 00 	call	0x8c	; 0x8c <Terminal_Send_Char>
			SPI_Sender_Send_Char(key) ; 
		}
		else if (key == 0x0D) {
			if (counter <= 255) {
				SPI_Sender_Send_Char(0x0D) ;
				for (loop_iterator = 0 ; loop_iterator <= counter ; loop_iterator ++) {	// send string over SPI char by char
 11e:	1f 5f       	subi	r17, 0xFF	; 255
 120:	01 17       	cp	r16, r17
 122:	88 f7       	brcc	.-30     	; 0x106 <main+0x6e>
					SPI_Sender_Send_Char(message[loop_iterator]) ;
					Terminal_Send_Char(0) ;
				}
				Terminal_Send_Char(0x0D) ;
 124:	8d e0       	ldi	r24, 0x0D	; 13
 126:	0e 94 46 00 	call	0x8c	; 0x8c <Terminal_Send_Char>
 12a:	fe 01       	movw	r30, r28
 12c:	31 96       	adiw	r30, 0x01	; 1
				counter = 0 ;
				for (loop_iterator = 0 ; loop_iterator <10 ; loop_iterator ++) {	// send string as a char by char
					message[loop_iterator] = 0 ;
 12e:	11 92       	st	Z+, r1
					SPI_Sender_Send_Char(message[loop_iterator]) ;
					Terminal_Send_Char(0) ;
				}
				Terminal_Send_Char(0x0D) ;
				counter = 0 ;
				for (loop_iterator = 0 ; loop_iterator <10 ; loop_iterator ++) {	// send string as a char by char
 130:	ee 15       	cp	r30, r14
 132:	ff 05       	cpc	r31, r15
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0x96>
				for (loop_iterator = 0 ; loop_iterator <= counter ; loop_iterator ++) {	// send string over SPI char by char
					SPI_Sender_Send_Char(message[loop_iterator]) ;
					Terminal_Send_Char(0) ;
				}
				Terminal_Send_Char(0x0D) ;
				counter = 0 ;
 136:	00 e0       	ldi	r16, 0x00	; 0
 138:	d1 cf       	rjmp	.-94     	; 0xdc <main+0x44>
		if (key == 32) {		// user entered a space 
			SPI_Sender_Send_Char(key) ; 
		}
		else if (key == 0x0D) {
			if (counter <= 255) {
				SPI_Sender_Send_Char(0x0D) ;
 13a:	8d e0       	ldi	r24, 0x0D	; 13
 13c:	0e 94 40 00 	call	0x80	; 0x80 <SPI_Sender_Send_Char>
				for (loop_iterator = 0 ; loop_iterator <= counter ; loop_iterator ++) {	// send string over SPI char by char
 140:	10 e0       	ldi	r17, 0x00	; 0
 142:	e1 cf       	rjmp	.-62     	; 0x106 <main+0x6e>

00000144 <SPI_Master_init>:
	
	// configure MISO as an output
	DDRB_REG |= (1 << MISO) ;
	
	// Enable SPI
	SPCR |= (1 << SPE) ; 
 144:	e8 2f       	mov	r30, r24
 146:	87 b3       	in	r24, 0x17	; 23
 148:	80 6b       	ori	r24, 0xB0	; 176
 14a:	87 bb       	out	0x17, r24	; 23
 14c:	c4 9a       	sbi	0x18, 4	; 24
 14e:	be 98       	cbi	0x17, 6	; 23
 150:	8e 2f       	mov	r24, r30
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	87 30       	cpi	r24, 0x07	; 7
 156:	91 05       	cpc	r25, r1
 158:	18 f5       	brcc	.+70     	; 0x1a0 <SPI_Master_init+0x5c>
 15a:	fc 01       	movw	r30, r24
 15c:	e6 5d       	subi	r30, 0xD6	; 214
 15e:	ff 4f       	sbci	r31, 0xFF	; 255
 160:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__tablejump2__>
 164:	8d b1       	in	r24, 0x0d	; 13
 166:	80 65       	ori	r24, 0x50	; 80
 168:	8d b9       	out	0x0d, r24	; 13
 16a:	08 95       	ret
 16c:	8d b1       	in	r24, 0x0d	; 13
 16e:	81 65       	ori	r24, 0x51	; 81
 170:	8d b9       	out	0x0d, r24	; 13
 172:	08 95       	ret
 174:	8d b1       	in	r24, 0x0d	; 13
 176:	82 65       	ori	r24, 0x52	; 82
 178:	8d b9       	out	0x0d, r24	; 13
 17a:	08 95       	ret
 17c:	8d b1       	in	r24, 0x0d	; 13
 17e:	83 65       	ori	r24, 0x53	; 83
 180:	8d b9       	out	0x0d, r24	; 13
 182:	08 95       	ret
 184:	8d b1       	in	r24, 0x0d	; 13
 186:	80 65       	ori	r24, 0x50	; 80
 188:	8d b9       	out	0x0d, r24	; 13
 18a:	70 9a       	sbi	0x0e, 0	; 14
 18c:	08 95       	ret
 18e:	8d b1       	in	r24, 0x0d	; 13
 190:	81 65       	ori	r24, 0x51	; 81
 192:	8d b9       	out	0x0d, r24	; 13
 194:	70 9a       	sbi	0x0e, 0	; 14
 196:	08 95       	ret
 198:	8d b1       	in	r24, 0x0d	; 13
 19a:	82 65       	ori	r24, 0x52	; 82
 19c:	8d b9       	out	0x0d, r24	; 13
 19e:	70 9a       	sbi	0x0e, 0	; 14
 1a0:	08 95       	ret

000001a2 <SPI_Transmit_Char>:
Description : function to transmit character data over SPI 
inputs		: character data to be sent 
outputs		: none
*/
void SPI_Transmit_Char (unsigned char data) {
	PORTB_REG &= ~(1<<SS);			/* Make low on SS pin */
 1a2:	c4 98       	cbi	0x18, 4	; 24
	SPDR = data ; 
 1a4:	8f b9       	out	0x0f, r24	; 15
	while((SPSR & (1<<SPIF)) == 0);  // wait until transmission is complete
 1a6:	77 9b       	sbis	0x0e, 7	; 14
 1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <SPI_Transmit_Char+0x4>

}
 1aa:	08 95       	ret

000001ac <UART_init>:
	unsigned char counter = 0 ; 
	while (str[counter] != 0) {
		UART_Transmit_Char(str[counter]) ; 
		counter ++ ; 
	}
}
 1ac:	9c 01       	movw	r18, r24
 1ae:	8a b1       	in	r24, 0x0a	; 10
 1b0:	88 61       	ori	r24, 0x18	; 24
 1b2:	8a b9       	out	0x0a, r24	; 10
 1b4:	61 11       	cpse	r22, r1
 1b6:	14 c0       	rjmp	.+40     	; 0x1e0 <UART_init+0x34>
 1b8:	41 30       	cpi	r20, 0x01	; 1
 1ba:	49 f0       	breq	.+18     	; 0x1ce <UART_init+0x22>
 1bc:	28 f0       	brcs	.+10     	; 0x1c8 <UART_init+0x1c>
 1be:	42 30       	cpi	r20, 0x02	; 2
 1c0:	49 f0       	breq	.+18     	; 0x1d4 <UART_init+0x28>
 1c2:	43 30       	cpi	r20, 0x03	; 3
 1c4:	51 f0       	breq	.+20     	; 0x1da <UART_init+0x2e>
 1c6:	21 c0       	rjmp	.+66     	; 0x20a <UART_init+0x5e>
 1c8:	80 e8       	ldi	r24, 0x80	; 128
 1ca:	80 bd       	out	0x20, r24	; 32
 1cc:	1e c0       	rjmp	.+60     	; 0x20a <UART_init+0x5e>
 1ce:	82 e8       	ldi	r24, 0x82	; 130
 1d0:	80 bd       	out	0x20, r24	; 32
 1d2:	1b c0       	rjmp	.+54     	; 0x20a <UART_init+0x5e>
 1d4:	84 e8       	ldi	r24, 0x84	; 132
 1d6:	80 bd       	out	0x20, r24	; 32
 1d8:	18 c0       	rjmp	.+48     	; 0x20a <UART_init+0x5e>
 1da:	86 e8       	ldi	r24, 0x86	; 134
 1dc:	80 bd       	out	0x20, r24	; 32
 1de:	15 c0       	rjmp	.+42     	; 0x20a <UART_init+0x5e>
 1e0:	61 30       	cpi	r22, 0x01	; 1
 1e2:	99 f4       	brne	.+38     	; 0x20a <UART_init+0x5e>
 1e4:	41 30       	cpi	r20, 0x01	; 1
 1e6:	49 f0       	breq	.+18     	; 0x1fa <UART_init+0x4e>
 1e8:	28 f0       	brcs	.+10     	; 0x1f4 <UART_init+0x48>
 1ea:	42 30       	cpi	r20, 0x02	; 2
 1ec:	49 f0       	breq	.+18     	; 0x200 <UART_init+0x54>
 1ee:	43 30       	cpi	r20, 0x03	; 3
 1f0:	51 f0       	breq	.+20     	; 0x206 <UART_init+0x5a>
 1f2:	0b c0       	rjmp	.+22     	; 0x20a <UART_init+0x5e>
 1f4:	88 e8       	ldi	r24, 0x88	; 136
 1f6:	80 bd       	out	0x20, r24	; 32
 1f8:	08 c0       	rjmp	.+16     	; 0x20a <UART_init+0x5e>
 1fa:	8a e8       	ldi	r24, 0x8A	; 138
 1fc:	80 bd       	out	0x20, r24	; 32
 1fe:	05 c0       	rjmp	.+10     	; 0x20a <UART_init+0x5e>
 200:	8c e8       	ldi	r24, 0x8C	; 140
 202:	80 bd       	out	0x20, r24	; 32
 204:	02 c0       	rjmp	.+4      	; 0x20a <UART_init+0x5e>
 206:	8e e8       	ldi	r24, 0x8E	; 142
 208:	80 bd       	out	0x20, r24	; 32
 20a:	c9 01       	movw	r24, r18
 20c:	a0 e0       	ldi	r26, 0x00	; 0
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	aa 1f       	adc	r26, r26
 216:	bb 1f       	adc	r27, r27
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	aa 1f       	adc	r26, r26
 21e:	bb 1f       	adc	r27, r27
 220:	9c 01       	movw	r18, r24
 222:	ad 01       	movw	r20, r26
 224:	22 0f       	add	r18, r18
 226:	33 1f       	adc	r19, r19
 228:	44 1f       	adc	r20, r20
 22a:	55 1f       	adc	r21, r21
 22c:	22 0f       	add	r18, r18
 22e:	33 1f       	adc	r19, r19
 230:	44 1f       	adc	r20, r20
 232:	55 1f       	adc	r21, r21
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	72 e1       	ldi	r23, 0x12	; 18
 238:	8a e7       	ldi	r24, 0x7A	; 122
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 2d 01 	call	0x25a	; 0x25a <__udivmodsi4>
 240:	21 50       	subi	r18, 0x01	; 1
 242:	31 09       	sbc	r19, r1
 244:	29 b9       	out	0x09, r18	; 9
 246:	30 bd       	out	0x20, r19	; 32
 248:	08 95       	ret

0000024a <UART_Transmit_Char>:
 24a:	5d 9b       	sbis	0x0b, 5	; 11
 24c:	fe cf       	rjmp	.-4      	; 0x24a <UART_Transmit_Char>
 24e:	8c b9       	out	0x0c, r24	; 12
 250:	08 95       	ret

00000252 <UART_Receive_Char>:
			   before reading the buffer and returning the value
inputs		: none
outputs		: received data
*/
unsigned char UART_Receive_Char (void) {
	while ( (UART_UCSRA & (1<<7)) == 0) ;	/* Wait till data is received */
 252:	5f 9b       	sbis	0x0b, 7	; 11
 254:	fe cf       	rjmp	.-4      	; 0x252 <UART_Receive_Char>
	return UART_UDR ; 
 256:	8c b1       	in	r24, 0x0c	; 12
 258:	08 95       	ret

0000025a <__udivmodsi4>:
 25a:	a1 e2       	ldi	r26, 0x21	; 33
 25c:	1a 2e       	mov	r1, r26
 25e:	aa 1b       	sub	r26, r26
 260:	bb 1b       	sub	r27, r27
 262:	fd 01       	movw	r30, r26
 264:	0d c0       	rjmp	.+26     	; 0x280 <__udivmodsi4_ep>

00000266 <__udivmodsi4_loop>:
 266:	aa 1f       	adc	r26, r26
 268:	bb 1f       	adc	r27, r27
 26a:	ee 1f       	adc	r30, r30
 26c:	ff 1f       	adc	r31, r31
 26e:	a2 17       	cp	r26, r18
 270:	b3 07       	cpc	r27, r19
 272:	e4 07       	cpc	r30, r20
 274:	f5 07       	cpc	r31, r21
 276:	20 f0       	brcs	.+8      	; 0x280 <__udivmodsi4_ep>
 278:	a2 1b       	sub	r26, r18
 27a:	b3 0b       	sbc	r27, r19
 27c:	e4 0b       	sbc	r30, r20
 27e:	f5 0b       	sbc	r31, r21

00000280 <__udivmodsi4_ep>:
 280:	66 1f       	adc	r22, r22
 282:	77 1f       	adc	r23, r23
 284:	88 1f       	adc	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	1a 94       	dec	r1
 28a:	69 f7       	brne	.-38     	; 0x266 <__udivmodsi4_loop>
 28c:	60 95       	com	r22
 28e:	70 95       	com	r23
 290:	80 95       	com	r24
 292:	90 95       	com	r25
 294:	9b 01       	movw	r18, r22
 296:	ac 01       	movw	r20, r24
 298:	bd 01       	movw	r22, r26
 29a:	cf 01       	movw	r24, r30
 29c:	08 95       	ret

0000029e <__tablejump2__>:
 29e:	ee 0f       	add	r30, r30
 2a0:	ff 1f       	adc	r31, r31
 2a2:	05 90       	lpm	r0, Z+
 2a4:	f4 91       	lpm	r31, Z
 2a6:	e0 2d       	mov	r30, r0
 2a8:	09 94       	ijmp

000002aa <_exit>:
 2aa:	f8 94       	cli

000002ac <__stop_program>:
 2ac:	ff cf       	rjmp	.-2      	; 0x2ac <__stop_program>
