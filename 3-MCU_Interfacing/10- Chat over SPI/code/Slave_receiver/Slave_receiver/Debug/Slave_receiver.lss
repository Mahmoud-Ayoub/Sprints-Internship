
Slave_receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b15  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000885  00000000  00000000  00000e71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f6  00000000  00000000  000016f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000184  00000000  00000000  00001cec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f0  00000000  00000000  00001e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000334  00000000  00000000  00002360  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00002694  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 42 00 	call	0x84	; 0x84 <main>
  64:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_Receiver_init>:
Description : function to initialize MCU as receiver
inputs		: none
outputs		: none	 
*/
void SPI_Receiver_init (void) {
	SPI_Slave_init() ;
  6c:	0e 94 51 00 	call	0xa2	; 0xa2 <SPI_Slave_init>
  70:	08 95       	ret

00000072 <SPI_Receiver_Receive_Char>:
Description : function to get data sent over SPI
inputs		: none
outputs		: received char  
*/
unsigned char SPI_Receiver_Receive_Char (void) {
	return SPI_Receive_Char() ;
  72:	0e 94 57 00 	call	0xae	; 0xae <SPI_Receive_Char>
  76:	08 95       	ret

00000078 <Terminal_init>:
Description : function to initialize terminal
inputs		: baud rate , no of stop bits required (_1_BIT , _2_BITS) , data size required (_5_BITS , _6_BITS , _7_BITS , _8_BITS)
outputs		: none
*/
void Terminal_init (unsigned int baud_rate , EN_STOP_BITS stop_bits , EN_DATA_SIZE data_size) {
	UART_init(baud_rate , stop_bits , data_size) ; 
  78:	0e 94 5b 00 	call	0xb6	; 0xb6 <UART_init>
  7c:	08 95       	ret

0000007e <Terminal_Send_Char>:
Description : function to send data to terminal
inputs		: data to be sent using UART
outputs		: none
*/
void Terminal_Send_Char (unsigned char data) {
	UART_Transmit_Char(data) ; 
  7e:	0e 94 aa 00 	call	0x154	; 0x154 <UART_Transmit_Char>
  82:	08 95       	ret

00000084 <main>:
int main(void)
{
	unsigned char key = 0 ;
	
    // Terminal initialization
    Terminal_init(9600 , _1_BIT , _8_BITS) ;
  84:	43 e0       	ldi	r20, 0x03	; 3
  86:	60 e0       	ldi	r22, 0x00	; 0
  88:	80 e8       	ldi	r24, 0x80	; 128
  8a:	95 e2       	ldi	r25, 0x25	; 37
  8c:	0e 94 3c 00 	call	0x78	; 0x78 <Terminal_init>
    
    // SPI Receiver initialization
    SPI_Receiver_init() ;
  90:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_Receiver_init>

	while (1) { 
		key = SPI_Receiver_Receive_Char() ; 
  94:	0e 94 39 00 	call	0x72	; 0x72 <SPI_Receiver_Receive_Char>
		if (key != 0) {
  98:	88 23       	and	r24, r24
  9a:	e1 f3       	breq	.-8      	; 0x94 <main+0x10>
			Terminal_Send_Char(key) ;
  9c:	0e 94 3f 00 	call	0x7e	; 0x7e <Terminal_Send_Char>
  a0:	f9 cf       	rjmp	.-14     	; 0x94 <main+0x10>

000000a2 <SPI_Slave_init>:
	unsigned char counter = 0 ;
	while (str[counter] != 0) {
		SPI_Transmit_Char(str[counter]) ;
		counter ++ ;
	}
}
  a2:	87 b3       	in	r24, 0x17	; 23
  a4:	8f 74       	andi	r24, 0x4F	; 79
  a6:	87 bb       	out	0x17, r24	; 23
  a8:	be 9a       	sbi	0x17, 6	; 23
  aa:	6e 9a       	sbi	0x0d, 6	; 13
  ac:	08 95       	ret

000000ae <SPI_Receive_Char>:
Description : function to receive character data over SPI
inputs		: none
outputs		: character data received 
*/
unsigned char SPI_Receive_Char (void) {
	while((SPSR & (1<<SPIF)) == 0);  // wait until reception is complete
  ae:	77 9b       	sbis	0x0e, 7	; 14
  b0:	fe cf       	rjmp	.-4      	; 0xae <SPI_Receive_Char>
	return SPDR ; 
  b2:	8f b1       	in	r24, 0x0f	; 15
  b4:	08 95       	ret

000000b6 <UART_init>:
/*
Description : The function initializes UART module with the specified baud rate , data frame
inputs		: baud rate , no of stop bits required (_1_BIT , _2_BITS) , data size required (_5_BITS , _6_BITS , _7_BITS , _8_BITS)
outputs		: none
*/
void UART_init (unsigned int baud_rate , EN_STOP_BITS stop_bits , EN_DATA_SIZE data_size) {
  b6:	9c 01       	movw	r18, r24
	/* Turn on transmission and reception */
	UART_UCSRB |= (1 << 4) | (1 << 3) ; 
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	88 61       	ori	r24, 0x18	; 24
  bc:	8a b9       	out	0x0a, r24	; 10
	
	/*  setting frame format */
	
	if (stop_bits == _1_BIT){
  be:	61 11       	cpse	r22, r1
  c0:	14 c0       	rjmp	.+40     	; 0xea <UART_init+0x34>
		switch (data_size) {
  c2:	41 30       	cpi	r20, 0x01	; 1
  c4:	49 f0       	breq	.+18     	; 0xd8 <UART_init+0x22>
  c6:	28 f0       	brcs	.+10     	; 0xd2 <UART_init+0x1c>
  c8:	42 30       	cpi	r20, 0x02	; 2
  ca:	49 f0       	breq	.+18     	; 0xde <UART_init+0x28>
  cc:	43 30       	cpi	r20, 0x03	; 3
  ce:	51 f0       	breq	.+20     	; 0xe4 <UART_init+0x2e>
  d0:	21 c0       	rjmp	.+66     	; 0x114 <UART_init+0x5e>
			case _5_BITS : 
				UART_UCSRC = 0b10000000 ; 
  d2:	80 e8       	ldi	r24, 0x80	; 128
  d4:	80 bd       	out	0x20, r24	; 32
				break;
  d6:	1e c0       	rjmp	.+60     	; 0x114 <UART_init+0x5e>
				
			case _6_BITS :
				UART_UCSRC = 0b10000010 ;
  d8:	82 e8       	ldi	r24, 0x82	; 130
  da:	80 bd       	out	0x20, r24	; 32
				break;
  dc:	1b c0       	rjmp	.+54     	; 0x114 <UART_init+0x5e>
				
			case _7_BITS :
				UART_UCSRC = 0b10000100 ;
  de:	84 e8       	ldi	r24, 0x84	; 132
  e0:	80 bd       	out	0x20, r24	; 32
				break;
  e2:	18 c0       	rjmp	.+48     	; 0x114 <UART_init+0x5e>
				
			case _8_BITS :
				UART_UCSRC = 0b10000110 ;
  e4:	86 e8       	ldi	r24, 0x86	; 134
  e6:	80 bd       	out	0x20, r24	; 32
				break;	
  e8:	15 c0       	rjmp	.+42     	; 0x114 <UART_init+0x5e>
		}
	}
	else if (stop_bits == _2_BITS) {
  ea:	61 30       	cpi	r22, 0x01	; 1
  ec:	99 f4       	brne	.+38     	; 0x114 <UART_init+0x5e>
		switch (data_size) {
  ee:	41 30       	cpi	r20, 0x01	; 1
  f0:	49 f0       	breq	.+18     	; 0x104 <UART_init+0x4e>
  f2:	28 f0       	brcs	.+10     	; 0xfe <UART_init+0x48>
  f4:	42 30       	cpi	r20, 0x02	; 2
  f6:	49 f0       	breq	.+18     	; 0x10a <UART_init+0x54>
  f8:	43 30       	cpi	r20, 0x03	; 3
  fa:	51 f0       	breq	.+20     	; 0x110 <UART_init+0x5a>
  fc:	0b c0       	rjmp	.+22     	; 0x114 <UART_init+0x5e>
			case _5_BITS :
				UART_UCSRC = 0b10001000 ;
  fe:	88 e8       	ldi	r24, 0x88	; 136
 100:	80 bd       	out	0x20, r24	; 32
				break;
 102:	08 c0       	rjmp	.+16     	; 0x114 <UART_init+0x5e>
			
			case _6_BITS :
				UART_UCSRC = 0b10001010 ;
 104:	8a e8       	ldi	r24, 0x8A	; 138
 106:	80 bd       	out	0x20, r24	; 32
				break;
 108:	05 c0       	rjmp	.+10     	; 0x114 <UART_init+0x5e>
			
			case _7_BITS :
				UART_UCSRC = 0b10001100 ;
 10a:	8c e8       	ldi	r24, 0x8C	; 140
 10c:	80 bd       	out	0x20, r24	; 32
				break;
 10e:	02 c0       	rjmp	.+4      	; 0x114 <UART_init+0x5e>
			
			case _8_BITS :
				UART_UCSRC = 0b10001110 ;
 110:	8e e8       	ldi	r24, 0x8E	; 142
 112:	80 bd       	out	0x20, r24	; 32
				break;
		}
	}
	unsigned int baud_prescale ; 
	baud_prescale = ((F_CPU / (16UL*baud_rate))-1) ; 
 114:	c9 01       	movw	r24, r18
 116:	a0 e0       	ldi	r26, 0x00	; 0
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	aa 1f       	adc	r26, r26
 120:	bb 1f       	adc	r27, r27
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	aa 1f       	adc	r26, r26
 128:	bb 1f       	adc	r27, r27
 12a:	9c 01       	movw	r18, r24
 12c:	ad 01       	movw	r20, r26
 12e:	22 0f       	add	r18, r18
 130:	33 1f       	adc	r19, r19
 132:	44 1f       	adc	r20, r20
 134:	55 1f       	adc	r21, r21
 136:	22 0f       	add	r18, r18
 138:	33 1f       	adc	r19, r19
 13a:	44 1f       	adc	r20, r20
 13c:	55 1f       	adc	r21, r21
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	72 e1       	ldi	r23, 0x12	; 18
 142:	8a e7       	ldi	r24, 0x7A	; 122
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 ae 00 	call	0x15c	; 0x15c <__udivmodsi4>
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	31 09       	sbc	r19, r1
	UART_UBRRL = baud_prescale ; 
 14e:	29 b9       	out	0x09, r18	; 9
	UART_UBRRH = baud_prescale >> 8 ; 
 150:	30 bd       	out	0x20, r19	; 32
 152:	08 95       	ret

00000154 <UART_Transmit_Char>:
	/*
	 (UDRE) Flag indicates whether the transmit buffer is ready to receive new data. 
	 This bit is set when the transmit buffer is empty, and cleared when the transmit buffer
	 contains data to be transmitted that has not yet been moved into the Shift Register
	*/
 	while ( (UART_UCSRA & (1<<5)) == 0) ;	/* Wait for empty transmit buffer*/
 154:	5d 9b       	sbis	0x0b, 5	; 11
 156:	fe cf       	rjmp	.-4      	; 0x154 <UART_Transmit_Char>
 	UART_UDR = data ;
 158:	8c b9       	out	0x0c, r24	; 12
 15a:	08 95       	ret

0000015c <__udivmodsi4>:
 15c:	a1 e2       	ldi	r26, 0x21	; 33
 15e:	1a 2e       	mov	r1, r26
 160:	aa 1b       	sub	r26, r26
 162:	bb 1b       	sub	r27, r27
 164:	fd 01       	movw	r30, r26
 166:	0d c0       	rjmp	.+26     	; 0x182 <__udivmodsi4_ep>

00000168 <__udivmodsi4_loop>:
 168:	aa 1f       	adc	r26, r26
 16a:	bb 1f       	adc	r27, r27
 16c:	ee 1f       	adc	r30, r30
 16e:	ff 1f       	adc	r31, r31
 170:	a2 17       	cp	r26, r18
 172:	b3 07       	cpc	r27, r19
 174:	e4 07       	cpc	r30, r20
 176:	f5 07       	cpc	r31, r21
 178:	20 f0       	brcs	.+8      	; 0x182 <__udivmodsi4_ep>
 17a:	a2 1b       	sub	r26, r18
 17c:	b3 0b       	sbc	r27, r19
 17e:	e4 0b       	sbc	r30, r20
 180:	f5 0b       	sbc	r31, r21

00000182 <__udivmodsi4_ep>:
 182:	66 1f       	adc	r22, r22
 184:	77 1f       	adc	r23, r23
 186:	88 1f       	adc	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	1a 94       	dec	r1
 18c:	69 f7       	brne	.-38     	; 0x168 <__udivmodsi4_loop>
 18e:	60 95       	com	r22
 190:	70 95       	com	r23
 192:	80 95       	com	r24
 194:	90 95       	com	r25
 196:	9b 01       	movw	r18, r22
 198:	ac 01       	movw	r20, r24
 19a:	bd 01       	movw	r22, r26
 19c:	cf 01       	movw	r24, r30
 19e:	08 95       	ret

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
