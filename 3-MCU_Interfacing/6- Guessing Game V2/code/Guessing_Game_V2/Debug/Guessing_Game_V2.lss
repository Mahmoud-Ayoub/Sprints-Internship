
Guessing_Game_V2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000650  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00000650  000006c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000006f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000724  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012c6  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009a7  00000000  00000000  00001b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c13  00000000  00000000  000024f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000220  00000000  00000000  00003108  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000059d  00000000  00000000  00003328  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c79  00000000  00000000  000038c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  0000453e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 38       	cpi	r26, 0x8E	; 142
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 64 01 	call	0x2c8	; 0x2c8 <main>
  7a:	0c 94 26 03 	jmp	0x64c	; 0x64c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <KEYPAD_read>:
Description : function to read value from keypad 
inputs		:	 none
outputs		:    value of pressed button on keypad 
*/
char KEYPAD_read (void) {
	 DDRD_REG = 0x0F ;
  82:	8f e0       	ldi	r24, 0x0F	; 15
  84:	81 bb       	out	0x11, r24	; 17
	char row_data ;
	while (1){
		for (row_data=1 ; row_data<=8 ; row_data = row_data << 1 ){         // loop for sending ones for rows
  86:	81 e0       	ldi	r24, 0x01	; 1
			OUTPUT_ROW = row_data ;
  88:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	e9 ef       	ldi	r30, 0xF9	; 249
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <KEYPAD_read+0xc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <KEYPAD_read+0x12>
  94:	00 00       	nop
			_delay_ms(1) ;
			if (row_data == 1 ){
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	a1 f4       	brne	.+40     	; 0xc2 <KEYPAD_read+0x40>
				switch(INPUT_COL){
  9a:	90 b3       	in	r25, 0x10	; 16
  9c:	92 95       	swap	r25
  9e:	9f 70       	andi	r25, 0x0F	; 15
  a0:	92 30       	cpi	r25, 0x02	; 2
  a2:	59 f0       	breq	.+22     	; 0xba <KEYPAD_read+0x38>
  a4:	20 f4       	brcc	.+8      	; 0xae <KEYPAD_read+0x2c>
  a6:	91 30       	cpi	r25, 0x01	; 1
  a8:	09 f4       	brne	.+2      	; 0xac <KEYPAD_read+0x2a>
  aa:	53 c0       	rjmp	.+166    	; 0x152 <KEYPAD_read+0xd0>
  ac:	4d c0       	rjmp	.+154    	; 0x148 <KEYPAD_read+0xc6>
  ae:	94 30       	cpi	r25, 0x04	; 4
  b0:	09 f4       	brne	.+2      	; 0xb4 <KEYPAD_read+0x32>
  b2:	51 c0       	rjmp	.+162    	; 0x156 <KEYPAD_read+0xd4>
  b4:	98 30       	cpi	r25, 0x08	; 8
  b6:	19 f0       	breq	.+6      	; 0xbe <KEYPAD_read+0x3c>
  b8:	47 c0       	rjmp	.+142    	; 0x148 <KEYPAD_read+0xc6>
					case 1  : return '1' ; break;
					case 2  : return '2' ; break;
  ba:	82 e3       	ldi	r24, 0x32	; 50
  bc:	08 95       	ret
					case 4  : return '3' ; break;
					case 8  : return '+' ; break;
  be:	8b e2       	ldi	r24, 0x2B	; 43
  c0:	08 95       	ret
				}
				
			}
			else if (row_data == 2 ){
  c2:	82 30       	cpi	r24, 0x02	; 2
  c4:	a9 f4       	brne	.+42     	; 0xf0 <KEYPAD_read+0x6e>
				switch(INPUT_COL){
  c6:	90 b3       	in	r25, 0x10	; 16
  c8:	92 95       	swap	r25
  ca:	9f 70       	andi	r25, 0x0F	; 15
  cc:	92 30       	cpi	r25, 0x02	; 2
  ce:	51 f0       	breq	.+20     	; 0xe4 <KEYPAD_read+0x62>
  d0:	20 f4       	brcc	.+8      	; 0xda <KEYPAD_read+0x58>
  d2:	91 30       	cpi	r25, 0x01	; 1
  d4:	09 f4       	brne	.+2      	; 0xd8 <KEYPAD_read+0x56>
  d6:	41 c0       	rjmp	.+130    	; 0x15a <KEYPAD_read+0xd8>
  d8:	37 c0       	rjmp	.+110    	; 0x148 <KEYPAD_read+0xc6>
  da:	94 30       	cpi	r25, 0x04	; 4
  dc:	29 f0       	breq	.+10     	; 0xe8 <KEYPAD_read+0x66>
  de:	98 30       	cpi	r25, 0x08	; 8
  e0:	29 f0       	breq	.+10     	; 0xec <KEYPAD_read+0x6a>
  e2:	32 c0       	rjmp	.+100    	; 0x148 <KEYPAD_read+0xc6>
					case 1  : return '4' ; break;
					case 2  : return '5' ; break;
  e4:	85 e3       	ldi	r24, 0x35	; 53
  e6:	08 95       	ret
					case 4  : return '6' ; break;
  e8:	86 e3       	ldi	r24, 0x36	; 54
  ea:	08 95       	ret
					case 8  : return '-' ; break;
  ec:	8d e2       	ldi	r24, 0x2D	; 45
  ee:	08 95       	ret
				}
				
			}
			else if (row_data == 4 ){
  f0:	84 30       	cpi	r24, 0x04	; 4
  f2:	a1 f4       	brne	.+40     	; 0x11c <KEYPAD_read+0x9a>
				switch(INPUT_COL){
  f4:	90 b3       	in	r25, 0x10	; 16
  f6:	92 95       	swap	r25
  f8:	9f 70       	andi	r25, 0x0F	; 15
  fa:	92 30       	cpi	r25, 0x02	; 2
  fc:	49 f0       	breq	.+18     	; 0x110 <KEYPAD_read+0x8e>
  fe:	18 f4       	brcc	.+6      	; 0x106 <KEYPAD_read+0x84>
 100:	91 30       	cpi	r25, 0x01	; 1
 102:	69 f1       	breq	.+90     	; 0x15e <KEYPAD_read+0xdc>
 104:	21 c0       	rjmp	.+66     	; 0x148 <KEYPAD_read+0xc6>
 106:	94 30       	cpi	r25, 0x04	; 4
 108:	29 f0       	breq	.+10     	; 0x114 <KEYPAD_read+0x92>
 10a:	98 30       	cpi	r25, 0x08	; 8
 10c:	29 f0       	breq	.+10     	; 0x118 <KEYPAD_read+0x96>
 10e:	1c c0       	rjmp	.+56     	; 0x148 <KEYPAD_read+0xc6>
					case 1  : return '7' ; break;
					case 2  : return '8' ; break;
 110:	88 e3       	ldi	r24, 0x38	; 56
 112:	08 95       	ret
					case 4  : return '9' ; break;
 114:	89 e3       	ldi	r24, 0x39	; 57
 116:	08 95       	ret
					case 8  : return '*' ; break;
 118:	8a e2       	ldi	r24, 0x2A	; 42
 11a:	08 95       	ret
				}
				
			}
			else if (row_data == 8 ){
 11c:	88 30       	cpi	r24, 0x08	; 8
 11e:	a1 f4       	brne	.+40     	; 0x148 <KEYPAD_read+0xc6>
				switch(INPUT_COL){
 120:	90 b3       	in	r25, 0x10	; 16
 122:	92 95       	swap	r25
 124:	9f 70       	andi	r25, 0x0F	; 15
 126:	92 30       	cpi	r25, 0x02	; 2
 128:	49 f0       	breq	.+18     	; 0x13c <KEYPAD_read+0xba>
 12a:	18 f4       	brcc	.+6      	; 0x132 <KEYPAD_read+0xb0>
 12c:	91 30       	cpi	r25, 0x01	; 1
 12e:	c9 f0       	breq	.+50     	; 0x162 <KEYPAD_read+0xe0>
 130:	0b c0       	rjmp	.+22     	; 0x148 <KEYPAD_read+0xc6>
 132:	94 30       	cpi	r25, 0x04	; 4
 134:	29 f0       	breq	.+10     	; 0x140 <KEYPAD_read+0xbe>
 136:	98 30       	cpi	r25, 0x08	; 8
 138:	29 f0       	breq	.+10     	; 0x144 <KEYPAD_read+0xc2>
 13a:	06 c0       	rjmp	.+12     	; 0x148 <KEYPAD_read+0xc6>
					case 1  : return '#' ; break;
					case 2  : return '0' ; break;
 13c:	80 e3       	ldi	r24, 0x30	; 48
 13e:	08 95       	ret
					case 4  : return '=' ; break;
 140:	8d e3       	ldi	r24, 0x3D	; 61
 142:	08 95       	ret
					case 8  : return '/' ; break;
 144:	8f e2       	ldi	r24, 0x2F	; 47
 146:	08 95       	ret
*/
char KEYPAD_read (void) {
	 DDRD_REG = 0x0F ;
	char row_data ;
	while (1){
		for (row_data=1 ; row_data<=8 ; row_data = row_data << 1 ){         // loop for sending ones for rows
 148:	88 0f       	add	r24, r24
 14a:	89 30       	cpi	r24, 0x09	; 9
 14c:	08 f4       	brcc	.+2      	; 0x150 <KEYPAD_read+0xce>
 14e:	9c cf       	rjmp	.-200    	; 0x88 <KEYPAD_read+0x6>
 150:	9a cf       	rjmp	.-204    	; 0x86 <KEYPAD_read+0x4>
			OUTPUT_ROW = row_data ;
			_delay_ms(1) ;
			if (row_data == 1 ){
				switch(INPUT_COL){
					case 1  : return '1' ; break;
 152:	81 e3       	ldi	r24, 0x31	; 49
 154:	08 95       	ret
					case 2  : return '2' ; break;
					case 4  : return '3' ; break;
 156:	83 e3       	ldi	r24, 0x33	; 51
 158:	08 95       	ret
				}
				
			}
			else if (row_data == 2 ){
				switch(INPUT_COL){
					case 1  : return '4' ; break;
 15a:	84 e3       	ldi	r24, 0x34	; 52
 15c:	08 95       	ret
				}
				
			}
			else if (row_data == 4 ){
				switch(INPUT_COL){
					case 1  : return '7' ; break;
 15e:	87 e3       	ldi	r24, 0x37	; 55
 160:	08 95       	ret
				}
				
			}
			else if (row_data == 8 ){
				switch(INPUT_COL){
					case 1  : return '#' ; break;
 162:	83 e2       	ldi	r24, 0x23	; 35
					case 8  : return '/' ; break;
				}	
			}			
		}
	}
}
 164:	08 95       	ret

00000166 <KEYPAD_wait>:
Description : function to handle pressing on keypad buttons
inputs		:	 none
outputs		:    none
*/
void KEYPAD_wait (void) {
	while(INPUT_COL) ;
 166:	80 b3       	in	r24, 0x10	; 16
 168:	82 95       	swap	r24
 16a:	8f 70       	andi	r24, 0x0F	; 15
 16c:	e1 f7       	brne	.-8      	; 0x166 <KEYPAD_wait>
 16e:	08 95       	ret

00000170 <LCD_send_cmd>:
/*
Description : function to send command to LCD
inputs		: command
outputs		: none
*/
void LCD_send_cmd (char cmd) {
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
	
	char command ;
	
	command = (PORTC_REG & 0x0F) | (cmd & 0xF0);	// Sending upper nibble
 174:	65 b3       	in	r22, 0x15	; 21
	DIO_SetPortValue(portC , command) ;
 176:	6f 70       	andi	r22, 0x0F	; 15
 178:	80 7f       	andi	r24, 0xF0	; 240
 17a:	68 2b       	or	r22, r24
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	0e 94 09 02 	call	0x412	; 0x412 <DIO_SetPortValue>
	CLEAR_BIT (PORTC_REG , Rs) ;					// write command
 182:	a8 98       	cbi	0x15, 0	; 21
	SET_BIT (PORTC_REG , E) ;						//  E is set high (telling LCD to receive data)
 184:	aa 9a       	sbi	0x15, 2	; 21
 186:	89 ef       	ldi	r24, 0xF9	; 249
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCD_send_cmd+0x1a>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <LCD_send_cmd+0x20>
 190:	00 00       	nop
	_delay_ms(1) ;
	CLEAR_BIT (PORTC_REG , E) ;						// E is set low (telling LCD that we are done sending data)
 192:	aa 98       	cbi	0x15, 2	; 21
	
	command = (PORTC_REG & 0x0F) | (cmd << 4);		// Sending lower nibble
 194:	65 b3       	in	r22, 0x15	; 21
	DIO_SetPortValue(portC , command) ;
 196:	6f 70       	andi	r22, 0x0F	; 15
 198:	20 e1       	ldi	r18, 0x10	; 16
 19a:	c2 9f       	mul	r28, r18
 19c:	c0 01       	movw	r24, r0
 19e:	11 24       	eor	r1, r1
 1a0:	68 2b       	or	r22, r24
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	0e 94 09 02 	call	0x412	; 0x412 <DIO_SetPortValue>
	CLEAR_BIT (PORTC_REG , Rs) ;					// write command
 1a8:	a8 98       	cbi	0x15, 0	; 21
	SET_BIT (PORTC_REG , E) ;						//  E is set high (telling LCD to receive data)
 1aa:	aa 9a       	sbi	0x15, 2	; 21
 1ac:	89 ef       	ldi	r24, 0xF9	; 249
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LCD_send_cmd+0x40>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <LCD_send_cmd+0x46>
 1b6:	00 00       	nop
	_delay_ms(1) ;
	CLEAR_BIT (PORTC_REG , E) ;						// E is set low (telling LCD that we are done sending data)
 1b8:	aa 98       	cbi	0x15, 2	; 21
}
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <LCD_init>:
Description : function to initialize LCD port , 4 bits mode , and send required commands for initialization
inputs		: none
outputs		: none
*/
void LCD_init (void) {
	DIO_SetPortDirection(portC , OUTPUT) ;		// all pins of PORT C is output
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <DIO_SetPortDirection>
	DIO_SetPortValue(portC, 0) ;				// all pins are reseted
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	0e 94 09 02 	call	0x412	; 0x412 <DIO_SetPortValue>
	            
	LCD_send_cmd(0x33) ;			// needed commands for 4 bits mode   (group of initial commands must be sent to LCD)
 1ce:	83 e3       	ldi	r24, 0x33	; 51
 1d0:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_send_cmd>
	LCD_send_cmd(0x32) ;
 1d4:	82 e3       	ldi	r24, 0x32	; 50
 1d6:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_send_cmd>
	LCD_send_cmd(0x28) ;
 1da:	88 e2       	ldi	r24, 0x28	; 40
 1dc:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_send_cmd>
	LCD_send_cmd(0x0E) ;
 1e0:	8e e0       	ldi	r24, 0x0E	; 14
 1e2:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_send_cmd>
	LCD_send_cmd(0x01) ;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_send_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ec:	83 ef       	ldi	r24, 0xF3	; 243
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <LCD_init+0x32>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <LCD_init+0x38>
 1f6:	00 00       	nop
	_delay_us(2000) ;
	LCD_send_cmd(0x06) ;
 1f8:	86 e0       	ldi	r24, 0x06	; 6
 1fa:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_send_cmd>
 1fe:	08 95       	ret

00000200 <LCD_send_char>:
/*
Description : function to send character to LCD
inputs		: char data
outputs		: none
*/
void LCD_send_char (char value) {
 200:	cf 93       	push	r28
 202:	c8 2f       	mov	r28, r24
	
	char sent_value ; 
	
	sent_value = (PORTC_REG & 0x0F) | (value & 0xF0);/* Sending upper nibble */
 204:	65 b3       	in	r22, 0x15	; 21
	DIO_SetPortValue(portC , sent_value) ;
 206:	6f 70       	andi	r22, 0x0F	; 15
 208:	80 7f       	andi	r24, 0xF0	; 240
 20a:	68 2b       	or	r22, r24
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	0e 94 09 02 	call	0x412	; 0x412 <DIO_SetPortValue>
	SET_BIT (PORTC_REG , Rs) ;						// write data
 212:	a8 9a       	sbi	0x15, 0	; 21
	SET_BIT (PORTC_REG , E) ;						//  E is set high (telling LCD to receive data)
 214:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 216:	89 ef       	ldi	r24, 0xF9	; 249
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <LCD_send_char+0x1a>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <LCD_send_char+0x20>
 220:	00 00       	nop
	_delay_ms(1) ;
	CLEAR_BIT (PORTC_REG , E) ;						// E is set low (telling LCD that we are done sending data)
 222:	aa 98       	cbi	0x15, 2	; 21
	
	sent_value = (PORTC_REG & 0x0F) | (value << 4);  /* Sending lower nibble */
 224:	65 b3       	in	r22, 0x15	; 21
	DIO_SetPortValue(portC , sent_value) ;
 226:	6f 70       	andi	r22, 0x0F	; 15
 228:	20 e1       	ldi	r18, 0x10	; 16
 22a:	c2 9f       	mul	r28, r18
 22c:	c0 01       	movw	r24, r0
 22e:	11 24       	eor	r1, r1
 230:	68 2b       	or	r22, r24
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	0e 94 09 02 	call	0x412	; 0x412 <DIO_SetPortValue>
	SET_BIT (PORTC_REG , Rs) ;						// write data
 238:	a8 9a       	sbi	0x15, 0	; 21
	SET_BIT (PORTC_REG , E) ;						//  E is set high (telling LCD to receive data)
 23a:	aa 9a       	sbi	0x15, 2	; 21
 23c:	89 ef       	ldi	r24, 0xF9	; 249
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <LCD_send_char+0x40>
 244:	00 c0       	rjmp	.+0      	; 0x246 <LCD_send_char+0x46>
 246:	00 00       	nop
	_delay_ms(1) ;
	CLEAR_BIT (PORTC_REG , E) ;						// E is set low (telling LCD that we are done sending data)
 248:	aa 98       	cbi	0x15, 2	; 21
}
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <LCD_send_str>:
/*
Description : function to send string to LCD
inputs		: string data
outputs		: none
*/
void LCD_send_str (char* str) {
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	ec 01       	movw	r28, r24
	unsigned int char_index = 0 ; 
	while (str[char_index] != '\0') {
 254:	88 81       	ld	r24, Y
 256:	88 23       	and	r24, r24
 258:	31 f0       	breq	.+12     	; 0x266 <LCD_send_str+0x18>
 25a:	21 96       	adiw	r28, 0x01	; 1
		LCD_send_char(str[char_index]) ; 
 25c:	0e 94 00 01 	call	0x200	; 0x200 <LCD_send_char>
inputs		: string data
outputs		: none
*/
void LCD_send_str (char* str) {
	unsigned int char_index = 0 ; 
	while (str[char_index] != '\0') {
 260:	89 91       	ld	r24, Y+
 262:	81 11       	cpse	r24, r1
 264:	fb cf       	rjmp	.-10     	; 0x25c <LCD_send_str+0xe>
		LCD_send_char(str[char_index]) ; 
		char_index ++ ; 
	}	
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <LCD_clear>:
Description : function to clear the LCD
inputs		: none
outputs		: none
*/
void LCD_clear (void) {
	LCD_send_cmd(0x01) ;         
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_send_cmd>
 272:	08 95       	ret

00000274 <LCD_newline>:
Description : function to Force cursor to beginning of second line
inputs		: none
outputs		: none
*/
void LCD_newline (void) {
	LCD_send_cmd(0xC0) ;
 274:	80 ec       	ldi	r24, 0xC0	; 192
 276:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_send_cmd>
 27a:	08 95       	ret

0000027c <start_game>:
Description : function to start new game by printing message on LCD
inputs		: none
outputs		: none
*/
void start_game (void) {
	LCD_clear() ; 
 27c:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_clear>
	LCD_send_str("Guess Number: ") ;
 280:	84 e6       	ldi	r24, 0x64	; 100
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_send_str>
	LCD_newline() ;
 288:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_newline>
 28c:	08 95       	ret

0000028e <check_error>:
inputs		: pressed keys on keypad
outputs		: 1 >> error detected  || 0 >> no error
*/
char check_error (char* keys) {
	int guessed_number ; 
	guessed_number = atoi (keys) ; 
 28e:	0e 94 9d 02 	call	0x53a	; 0x53a <atoi>
 292:	9c 01       	movw	r18, r24
 294:	21 50       	subi	r18, 0x01	; 1
 296:	31 09       	sbc	r19, r1
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	2f 30       	cpi	r18, 0x0F	; 15
 29c:	31 05       	cpc	r19, r1
 29e:	08 f4       	brcc	.+2      	; 0x2a2 <check_error+0x14>
 2a0:	80 e0       	ldi	r24, 0x00	; 0
	if ((guessed_number < 1) || (guessed_number > 15)) 
		return 1 ;
	else 
		return 0 ; 
}
 2a2:	08 95       	ret

000002a4 <check_state>:
/*
Description : function to check if number is guessed correctly or not
inputs		: pressed keys on keypad , random number generated
outputs		: 1 >> guessed correctly (win state)  || 0 >> guessed uncorrectly (lose state)
*/
char check_state (char* keys , char random_num) {
 2a4:	cf 93       	push	r28
 2a6:	c6 2f       	mov	r28, r22
	int guessed_number ;
	guessed_number = atoi (keys) ;
 2a8:	0e 94 9d 02 	call	0x53a	; 0x53a <atoi>
 2ac:	6c 2f       	mov	r22, r28
 2ae:	70 e0       	ldi	r23, 0x00	; 0
 2b0:	21 e0       	ldi	r18, 0x01	; 1
 2b2:	68 17       	cp	r22, r24
 2b4:	79 07       	cpc	r23, r25
 2b6:	09 f0       	breq	.+2      	; 0x2ba <check_state+0x16>
 2b8:	20 e0       	ldi	r18, 0x00	; 0
	if (guessed_number == random_num)
		return 1 ;
	else
		return 0 ;
}
 2ba:	82 2f       	mov	r24, r18
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <array_zeros>:
*/
void array_zeros (char* arr) {
	char no_of_elements  = 0 ; 
	char length = sizeof (arr) / sizeof (arr[0]) ; 
	for (no_of_elements = 0 ; no_of_elements < length ; no_of_elements ++ ) {
		arr[no_of_elements] = 0 ; 
 2c0:	fc 01       	movw	r30, r24
 2c2:	10 82       	st	Z, r1
 2c4:	11 82       	std	Z+1, r1	; 0x01
 2c6:	08 95       	ret

000002c8 <main>:
	}
}

int main(void)
{	
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	00 d0       	rcall	.+0      	; 0x2ce <main+0x6>
 2ce:	1f 92       	push	r1
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
    LCD_init() ;  
 2d4:	0e 94 df 00 	call	0x1be	; 0x1be <LCD_init>
inputs		: lower value , upper value
outputs		: random value generated
*/
char generate_random_value (uint8 lower , uint8 upper) {
	char number ; 
	number = (rand() % (upper - lower + 1)) + lower ; 
 2d8:	0e 94 8d 02 	call	0x51a	; 0x51a <rand>
 2dc:	6f e0       	ldi	r22, 0x0F	; 15
 2de:	70 e0       	ldi	r23, 0x00	; 0
 2e0:	0e 94 19 02 	call	0x432	; 0x432 <__divmodhi4>
 2e4:	ff 24       	eor	r15, r15
 2e6:	f3 94       	inc	r15
 2e8:	f8 0e       	add	r15, r24
	char keys_pressed[3] ;
	char single_number ; 
	char no_of_keys = 0 ;  
	char random_number = generate_random_value(1,15) ;  
	
	start_game() ; 
 2ea:	0e 94 3e 01 	call	0x27c	; 0x27c <start_game>
int main(void)
{	
    LCD_init() ;  
	char keys_pressed[3] ;
	char single_number ; 
	char no_of_keys = 0 ;  
 2ee:	00 e0       	ldi	r16, 0x00	; 0
	char random_number = generate_random_value(1,15) ;  
	
	start_game() ; 
													
	while (1) {
		single_number = KEYPAD_read() ; 
 2f0:	0e 94 41 00 	call	0x82	; 0x82 <KEYPAD_read>
 2f4:	18 2f       	mov	r17, r24
		KEYPAD_wait() ; 
 2f6:	0e 94 b3 00 	call	0x166	; 0x166 <KEYPAD_wait>
		if (single_number != '=') {                          // user doesn't finish entering the number
 2fa:	1d 33       	cpi	r17, 0x3D	; 61
 2fc:	61 f0       	breq	.+24     	; 0x316 <main+0x4e>
			LCD_send_char(single_number) ; 
 2fe:	81 2f       	mov	r24, r17
 300:	0e 94 00 01 	call	0x200	; 0x200 <LCD_send_char>
			keys_pressed[no_of_keys] = single_number ;  
 304:	e1 e0       	ldi	r30, 0x01	; 1
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	ec 0f       	add	r30, r28
 30a:	fd 1f       	adc	r31, r29
 30c:	e0 0f       	add	r30, r16
 30e:	f1 1d       	adc	r31, r1
 310:	10 83       	st	Z, r17
			no_of_keys ++ ; 
 312:	0f 5f       	subi	r16, 0xFF	; 255
 314:	ed cf       	rjmp	.-38     	; 0x2f0 <main+0x28>
		}
		else {												// user finished entering the number
			if (check_error(keys_pressed) == 1) {           // check number of presses is in between 1 , 15
 316:	ce 01       	movw	r24, r28
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	0e 94 47 01 	call	0x28e	; 0x28e <check_error>
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	b9 f4       	brne	.+46     	; 0x350 <main+0x88>
				LCD_clear() ;
 322:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_clear>
				LCD_send_str("Error ..") ;
 326:	83 e7       	ldi	r24, 0x73	; 115
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_send_str>
 32e:	2f eb       	ldi	r18, 0xBF	; 191
 330:	87 e2       	ldi	r24, 0x27	; 39
 332:	99 e0       	ldi	r25, 0x09	; 9
 334:	21 50       	subi	r18, 0x01	; 1
 336:	80 40       	sbci	r24, 0x00	; 0
 338:	90 40       	sbci	r25, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <main+0x6c>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <main+0x76>
 33e:	00 00       	nop
				_delay_ms(3000) ;
				array_zeros(keys_pressed) ;				
 340:	ce 01       	movw	r24, r28
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	0e 94 60 01 	call	0x2c0	; 0x2c0 <array_zeros>
				no_of_keys = 0 ; 
				start_game() ;
 348:	0e 94 3e 01 	call	0x27c	; 0x27c <start_game>
			if (check_error(keys_pressed) == 1) {           // check number of presses is in between 1 , 15
				LCD_clear() ;
				LCD_send_str("Error ..") ;
				_delay_ms(3000) ;
				array_zeros(keys_pressed) ;				
				no_of_keys = 0 ; 
 34c:	00 e0       	ldi	r16, 0x00	; 0
 34e:	d0 cf       	rjmp	.-96     	; 0x2f0 <main+0x28>
				start_game() ;
			}
			else {											// No error detected , check win or lose 
				if (check_state(keys_pressed , random_number) == 1) {                   // win
 350:	6f 2d       	mov	r22, r15
 352:	ce 01       	movw	r24, r28
 354:	01 96       	adiw	r24, 0x01	; 1
 356:	0e 94 52 01 	call	0x2a4	; 0x2a4 <check_state>
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	b9 f4       	brne	.+46     	; 0x38c <main+0xc4>
					LCD_clear() ;
 35e:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_clear>
					LCD_send_str("You Win") ;
 362:	8c e7       	ldi	r24, 0x7C	; 124
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_send_str>
 36a:	2f eb       	ldi	r18, 0xBF	; 191
 36c:	87 e2       	ldi	r24, 0x27	; 39
 36e:	99 e0       	ldi	r25, 0x09	; 9
 370:	21 50       	subi	r18, 0x01	; 1
 372:	80 40       	sbci	r24, 0x00	; 0
 374:	90 40       	sbci	r25, 0x00	; 0
 376:	e1 f7       	brne	.-8      	; 0x370 <main+0xa8>
 378:	00 c0       	rjmp	.+0      	; 0x37a <main+0xb2>
 37a:	00 00       	nop
					_delay_ms(3000) ;
					array_zeros(keys_pressed) ;
 37c:	ce 01       	movw	r24, r28
 37e:	01 96       	adiw	r24, 0x01	; 1
 380:	0e 94 60 01 	call	0x2c0	; 0x2c0 <array_zeros>
					no_of_keys = 0 ;
					start_game() ;
 384:	0e 94 3e 01 	call	0x27c	; 0x27c <start_game>
				if (check_state(keys_pressed , random_number) == 1) {                   // win
					LCD_clear() ;
					LCD_send_str("You Win") ;
					_delay_ms(3000) ;
					array_zeros(keys_pressed) ;
					no_of_keys = 0 ;
 388:	00 e0       	ldi	r16, 0x00	; 0
 38a:	b2 cf       	rjmp	.-156    	; 0x2f0 <main+0x28>
					start_game() ;
				}
				else {										// lose
					LCD_clear() ;
 38c:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_clear>
					LCD_send_str("You Lose") ;
 390:	84 e8       	ldi	r24, 0x84	; 132
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_send_str>
 398:	2f eb       	ldi	r18, 0xBF	; 191
 39a:	87 e2       	ldi	r24, 0x27	; 39
 39c:	99 e0       	ldi	r25, 0x09	; 9
 39e:	21 50       	subi	r18, 0x01	; 1
 3a0:	80 40       	sbci	r24, 0x00	; 0
 3a2:	90 40       	sbci	r25, 0x00	; 0
 3a4:	e1 f7       	brne	.-8      	; 0x39e <main+0xd6>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <main+0xe0>
 3a8:	00 00       	nop
					_delay_ms(3000) ;
					array_zeros(keys_pressed) ;
 3aa:	ce 01       	movw	r24, r28
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	0e 94 60 01 	call	0x2c0	; 0x2c0 <array_zeros>
					no_of_keys = 0 ;
					start_game() ;
 3b2:	0e 94 3e 01 	call	0x27c	; 0x27c <start_game>
				else {										// lose
					LCD_clear() ;
					LCD_send_str("You Lose") ;
					_delay_ms(3000) ;
					array_zeros(keys_pressed) ;
					no_of_keys = 0 ;
 3b6:	00 e0       	ldi	r16, 0x00	; 0
 3b8:	9b cf       	rjmp	.-202    	; 0x2f0 <main+0x28>

000003ba <DIO_SetPortDirection>:
Description : function to determine a selected port direction
inputs		: port number (portA , portB , portC , portD) , Direction required (INPUT , OUTPUT)
outputs		: none
*/
void DIO_SetPortDirection (uint8 PortNumber , uint8 Direction) {
	switch(PortNumber) {
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	79 f0       	breq	.+30     	; 0x3dc <DIO_SetPortDirection+0x22>
 3be:	28 f0       	brcs	.+10     	; 0x3ca <DIO_SetPortDirection+0x10>
 3c0:	82 30       	cpi	r24, 0x02	; 2
 3c2:	a9 f0       	breq	.+42     	; 0x3ee <DIO_SetPortDirection+0x34>
 3c4:	83 30       	cpi	r24, 0x03	; 3
 3c6:	e1 f0       	breq	.+56     	; 0x400 <__LOCK_REGION_LENGTH__>
 3c8:	08 95       	ret
		case portA : 
			if (Direction == OUTPUT) {
 3ca:	61 30       	cpi	r22, 0x01	; 1
 3cc:	19 f4       	brne	.+6      	; 0x3d4 <DIO_SetPortDirection+0x1a>
				DDRA_REG = 0xff ; 
 3ce:	8f ef       	ldi	r24, 0xFF	; 255
 3d0:	8a bb       	out	0x1a, r24	; 26
 3d2:	08 95       	ret
			}
			else if (Direction == INPUT) {
 3d4:	61 11       	cpse	r22, r1
 3d6:	1c c0       	rjmp	.+56     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
				DDRA_REG = 0x00 ; 
 3d8:	1a ba       	out	0x1a, r1	; 26
 3da:	08 95       	ret
			}
		break;
		
		case portB :
			if (Direction == OUTPUT) {
 3dc:	61 30       	cpi	r22, 0x01	; 1
 3de:	19 f4       	brne	.+6      	; 0x3e6 <DIO_SetPortDirection+0x2c>
				DDRB_REG = 0xff ;
 3e0:	8f ef       	ldi	r24, 0xFF	; 255
 3e2:	87 bb       	out	0x17, r24	; 23
 3e4:	08 95       	ret
			}
			else if (Direction == INPUT) {
 3e6:	61 11       	cpse	r22, r1
 3e8:	13 c0       	rjmp	.+38     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
				DDRB_REG = 0x00 ;
 3ea:	17 ba       	out	0x17, r1	; 23
 3ec:	08 95       	ret
			}
		break;
		
		case portC :
			if (Direction == OUTPUT) {
 3ee:	61 30       	cpi	r22, 0x01	; 1
 3f0:	19 f4       	brne	.+6      	; 0x3f8 <DIO_SetPortDirection+0x3e>
				DDRC_REG = 0xff ;
 3f2:	8f ef       	ldi	r24, 0xFF	; 255
 3f4:	84 bb       	out	0x14, r24	; 20
 3f6:	08 95       	ret
			}
			else if (Direction == INPUT) {
 3f8:	61 11       	cpse	r22, r1
 3fa:	0a c0       	rjmp	.+20     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
				DDRC_REG = 0x00 ;
 3fc:	14 ba       	out	0x14, r1	; 20
 3fe:	08 95       	ret
			}	
		break;
		
		case portD :
			if (Direction == OUTPUT) {
 400:	61 30       	cpi	r22, 0x01	; 1
 402:	19 f4       	brne	.+6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
				DDRD_REG = 0xff ;
 404:	8f ef       	ldi	r24, 0xFF	; 255
 406:	81 bb       	out	0x11, r24	; 17
 408:	08 95       	ret
			}
			else if (Direction == INPUT) {
 40a:	61 11       	cpse	r22, r1
 40c:	01 c0       	rjmp	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
				DDRD_REG = 0x00 ;
 40e:	11 ba       	out	0x11, r1	; 17
 410:	08 95       	ret

00000412 <DIO_SetPortValue>:
Description : function to determine a selected port value
inputs		: port number (portA , portB , portC , portD) , Value required 
outputs		: none
*/
void DIO_SetPortValue (uint8 PortNumber , uint8 Value) {
	switch(PortNumber) {
 412:	81 30       	cpi	r24, 0x01	; 1
 414:	41 f0       	breq	.+16     	; 0x426 <DIO_SetPortValue+0x14>
 416:	28 f0       	brcs	.+10     	; 0x422 <DIO_SetPortValue+0x10>
 418:	82 30       	cpi	r24, 0x02	; 2
 41a:	39 f0       	breq	.+14     	; 0x42a <DIO_SetPortValue+0x18>
 41c:	83 30       	cpi	r24, 0x03	; 3
 41e:	39 f0       	breq	.+14     	; 0x42e <DIO_SetPortValue+0x1c>
 420:	08 95       	ret
		case portA :
			PORTA_REG = Value ; 
 422:	6b bb       	out	0x1b, r22	; 27
		break;
 424:	08 95       	ret
		
		case portB :
			PORTB_REG = Value ; 
 426:	68 bb       	out	0x18, r22	; 24
		break;
 428:	08 95       	ret
		
		case portC :
			PORTC_REG = Value ; 
 42a:	65 bb       	out	0x15, r22	; 21
		break;
 42c:	08 95       	ret
		
		case portD :
			PORTD_REG = Value ; 
 42e:	62 bb       	out	0x12, r22	; 18
 430:	08 95       	ret

00000432 <__divmodhi4>:
 432:	97 fb       	bst	r25, 7
 434:	07 2e       	mov	r0, r23
 436:	16 f4       	brtc	.+4      	; 0x43c <__divmodhi4+0xa>
 438:	00 94       	com	r0
 43a:	07 d0       	rcall	.+14     	; 0x44a <__divmodhi4_neg1>
 43c:	77 fd       	sbrc	r23, 7
 43e:	09 d0       	rcall	.+18     	; 0x452 <__divmodhi4_neg2>
 440:	0e 94 2d 02 	call	0x45a	; 0x45a <__udivmodhi4>
 444:	07 fc       	sbrc	r0, 7
 446:	05 d0       	rcall	.+10     	; 0x452 <__divmodhi4_neg2>
 448:	3e f4       	brtc	.+14     	; 0x458 <__divmodhi4_exit>

0000044a <__divmodhi4_neg1>:
 44a:	90 95       	com	r25
 44c:	81 95       	neg	r24
 44e:	9f 4f       	sbci	r25, 0xFF	; 255
 450:	08 95       	ret

00000452 <__divmodhi4_neg2>:
 452:	70 95       	com	r23
 454:	61 95       	neg	r22
 456:	7f 4f       	sbci	r23, 0xFF	; 255

00000458 <__divmodhi4_exit>:
 458:	08 95       	ret

0000045a <__udivmodhi4>:
 45a:	aa 1b       	sub	r26, r26
 45c:	bb 1b       	sub	r27, r27
 45e:	51 e1       	ldi	r21, 0x11	; 17
 460:	07 c0       	rjmp	.+14     	; 0x470 <__udivmodhi4_ep>

00000462 <__udivmodhi4_loop>:
 462:	aa 1f       	adc	r26, r26
 464:	bb 1f       	adc	r27, r27
 466:	a6 17       	cp	r26, r22
 468:	b7 07       	cpc	r27, r23
 46a:	10 f0       	brcs	.+4      	; 0x470 <__udivmodhi4_ep>
 46c:	a6 1b       	sub	r26, r22
 46e:	b7 0b       	sbc	r27, r23

00000470 <__udivmodhi4_ep>:
 470:	88 1f       	adc	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	5a 95       	dec	r21
 476:	a9 f7       	brne	.-22     	; 0x462 <__udivmodhi4_loop>
 478:	80 95       	com	r24
 47a:	90 95       	com	r25
 47c:	bc 01       	movw	r22, r24
 47e:	cd 01       	movw	r24, r26
 480:	08 95       	ret

00000482 <do_rand>:
 482:	8f 92       	push	r8
 484:	9f 92       	push	r9
 486:	af 92       	push	r10
 488:	bf 92       	push	r11
 48a:	cf 92       	push	r12
 48c:	df 92       	push	r13
 48e:	ef 92       	push	r14
 490:	ff 92       	push	r15
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	ec 01       	movw	r28, r24
 498:	68 81       	ld	r22, Y
 49a:	79 81       	ldd	r23, Y+1	; 0x01
 49c:	8a 81       	ldd	r24, Y+2	; 0x02
 49e:	9b 81       	ldd	r25, Y+3	; 0x03
 4a0:	61 15       	cp	r22, r1
 4a2:	71 05       	cpc	r23, r1
 4a4:	81 05       	cpc	r24, r1
 4a6:	91 05       	cpc	r25, r1
 4a8:	21 f4       	brne	.+8      	; 0x4b2 <do_rand+0x30>
 4aa:	64 e2       	ldi	r22, 0x24	; 36
 4ac:	79 ed       	ldi	r23, 0xD9	; 217
 4ae:	8b e5       	ldi	r24, 0x5B	; 91
 4b0:	97 e0       	ldi	r25, 0x07	; 7
 4b2:	2d e1       	ldi	r18, 0x1D	; 29
 4b4:	33 ef       	ldi	r19, 0xF3	; 243
 4b6:	41 e0       	ldi	r20, 0x01	; 1
 4b8:	50 e0       	ldi	r21, 0x00	; 0
 4ba:	0e 94 c3 02 	call	0x586	; 0x586 <__divmodsi4>
 4be:	49 01       	movw	r8, r18
 4c0:	5a 01       	movw	r10, r20
 4c2:	9b 01       	movw	r18, r22
 4c4:	ac 01       	movw	r20, r24
 4c6:	a7 ea       	ldi	r26, 0xA7	; 167
 4c8:	b1 e4       	ldi	r27, 0x41	; 65
 4ca:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__muluhisi3>
 4ce:	6b 01       	movw	r12, r22
 4d0:	7c 01       	movw	r14, r24
 4d2:	ac ee       	ldi	r26, 0xEC	; 236
 4d4:	b4 ef       	ldi	r27, 0xF4	; 244
 4d6:	a5 01       	movw	r20, r10
 4d8:	94 01       	movw	r18, r8
 4da:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__mulohisi3>
 4de:	dc 01       	movw	r26, r24
 4e0:	cb 01       	movw	r24, r22
 4e2:	8c 0d       	add	r24, r12
 4e4:	9d 1d       	adc	r25, r13
 4e6:	ae 1d       	adc	r26, r14
 4e8:	bf 1d       	adc	r27, r15
 4ea:	b7 ff       	sbrs	r27, 7
 4ec:	03 c0       	rjmp	.+6      	; 0x4f4 <do_rand+0x72>
 4ee:	01 97       	sbiw	r24, 0x01	; 1
 4f0:	a1 09       	sbc	r26, r1
 4f2:	b0 48       	sbci	r27, 0x80	; 128
 4f4:	88 83       	st	Y, r24
 4f6:	99 83       	std	Y+1, r25	; 0x01
 4f8:	aa 83       	std	Y+2, r26	; 0x02
 4fa:	bb 83       	std	Y+3, r27	; 0x03
 4fc:	9f 77       	andi	r25, 0x7F	; 127
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	ff 90       	pop	r15
 504:	ef 90       	pop	r14
 506:	df 90       	pop	r13
 508:	cf 90       	pop	r12
 50a:	bf 90       	pop	r11
 50c:	af 90       	pop	r10
 50e:	9f 90       	pop	r9
 510:	8f 90       	pop	r8
 512:	08 95       	ret

00000514 <rand_r>:
 514:	0e 94 41 02 	call	0x482	; 0x482 <do_rand>
 518:	08 95       	ret

0000051a <rand>:
 51a:	80 e6       	ldi	r24, 0x60	; 96
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	0e 94 41 02 	call	0x482	; 0x482 <do_rand>
 522:	08 95       	ret

00000524 <srand>:
 524:	a0 e0       	ldi	r26, 0x00	; 0
 526:	b0 e0       	ldi	r27, 0x00	; 0
 528:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 52c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 530:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 534:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 538:	08 95       	ret

0000053a <atoi>:
 53a:	fc 01       	movw	r30, r24
 53c:	88 27       	eor	r24, r24
 53e:	99 27       	eor	r25, r25
 540:	e8 94       	clt
 542:	21 91       	ld	r18, Z+
 544:	20 32       	cpi	r18, 0x20	; 32
 546:	e9 f3       	breq	.-6      	; 0x542 <atoi+0x8>
 548:	29 30       	cpi	r18, 0x09	; 9
 54a:	10 f0       	brcs	.+4      	; 0x550 <atoi+0x16>
 54c:	2e 30       	cpi	r18, 0x0E	; 14
 54e:	c8 f3       	brcs	.-14     	; 0x542 <atoi+0x8>
 550:	2b 32       	cpi	r18, 0x2B	; 43
 552:	41 f0       	breq	.+16     	; 0x564 <atoi+0x2a>
 554:	2d 32       	cpi	r18, 0x2D	; 45
 556:	39 f4       	brne	.+14     	; 0x566 <atoi+0x2c>
 558:	68 94       	set
 55a:	04 c0       	rjmp	.+8      	; 0x564 <atoi+0x2a>
 55c:	0e 94 bb 02 	call	0x576	; 0x576 <__mulhi_const_10>
 560:	82 0f       	add	r24, r18
 562:	91 1d       	adc	r25, r1
 564:	21 91       	ld	r18, Z+
 566:	20 53       	subi	r18, 0x30	; 48
 568:	2a 30       	cpi	r18, 0x0A	; 10
 56a:	c0 f3       	brcs	.-16     	; 0x55c <atoi+0x22>
 56c:	1e f4       	brtc	.+6      	; 0x574 <atoi+0x3a>
 56e:	90 95       	com	r25
 570:	81 95       	neg	r24
 572:	9f 4f       	sbci	r25, 0xFF	; 255
 574:	08 95       	ret

00000576 <__mulhi_const_10>:
 576:	7a e0       	ldi	r23, 0x0A	; 10
 578:	97 9f       	mul	r25, r23
 57a:	90 2d       	mov	r25, r0
 57c:	87 9f       	mul	r24, r23
 57e:	80 2d       	mov	r24, r0
 580:	91 0d       	add	r25, r1
 582:	11 24       	eor	r1, r1
 584:	08 95       	ret

00000586 <__divmodsi4>:
 586:	05 2e       	mov	r0, r21
 588:	97 fb       	bst	r25, 7
 58a:	1e f4       	brtc	.+6      	; 0x592 <__divmodsi4+0xc>
 58c:	00 94       	com	r0
 58e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__negsi2>
 592:	57 fd       	sbrc	r21, 7
 594:	07 d0       	rcall	.+14     	; 0x5a4 <__divmodsi4_neg2>
 596:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__udivmodsi4>
 59a:	07 fc       	sbrc	r0, 7
 59c:	03 d0       	rcall	.+6      	; 0x5a4 <__divmodsi4_neg2>
 59e:	4e f4       	brtc	.+18     	; 0x5b2 <__divmodsi4_exit>
 5a0:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__negsi2>

000005a4 <__divmodsi4_neg2>:
 5a4:	50 95       	com	r21
 5a6:	40 95       	com	r20
 5a8:	30 95       	com	r19
 5aa:	21 95       	neg	r18
 5ac:	3f 4f       	sbci	r19, 0xFF	; 255
 5ae:	4f 4f       	sbci	r20, 0xFF	; 255
 5b0:	5f 4f       	sbci	r21, 0xFF	; 255

000005b2 <__divmodsi4_exit>:
 5b2:	08 95       	ret

000005b4 <__negsi2>:
 5b4:	90 95       	com	r25
 5b6:	80 95       	com	r24
 5b8:	70 95       	com	r23
 5ba:	61 95       	neg	r22
 5bc:	7f 4f       	sbci	r23, 0xFF	; 255
 5be:	8f 4f       	sbci	r24, 0xFF	; 255
 5c0:	9f 4f       	sbci	r25, 0xFF	; 255
 5c2:	08 95       	ret

000005c4 <__muluhisi3>:
 5c4:	0e 94 17 03 	call	0x62e	; 0x62e <__umulhisi3>
 5c8:	a5 9f       	mul	r26, r21
 5ca:	90 0d       	add	r25, r0
 5cc:	b4 9f       	mul	r27, r20
 5ce:	90 0d       	add	r25, r0
 5d0:	a4 9f       	mul	r26, r20
 5d2:	80 0d       	add	r24, r0
 5d4:	91 1d       	adc	r25, r1
 5d6:	11 24       	eor	r1, r1
 5d8:	08 95       	ret

000005da <__mulshisi3>:
 5da:	b7 ff       	sbrs	r27, 7
 5dc:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <__muluhisi3>

000005e0 <__mulohisi3>:
 5e0:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__muluhisi3>
 5e4:	82 1b       	sub	r24, r18
 5e6:	93 0b       	sbc	r25, r19
 5e8:	08 95       	ret

000005ea <__udivmodsi4>:
 5ea:	a1 e2       	ldi	r26, 0x21	; 33
 5ec:	1a 2e       	mov	r1, r26
 5ee:	aa 1b       	sub	r26, r26
 5f0:	bb 1b       	sub	r27, r27
 5f2:	fd 01       	movw	r30, r26
 5f4:	0d c0       	rjmp	.+26     	; 0x610 <__udivmodsi4_ep>

000005f6 <__udivmodsi4_loop>:
 5f6:	aa 1f       	adc	r26, r26
 5f8:	bb 1f       	adc	r27, r27
 5fa:	ee 1f       	adc	r30, r30
 5fc:	ff 1f       	adc	r31, r31
 5fe:	a2 17       	cp	r26, r18
 600:	b3 07       	cpc	r27, r19
 602:	e4 07       	cpc	r30, r20
 604:	f5 07       	cpc	r31, r21
 606:	20 f0       	brcs	.+8      	; 0x610 <__udivmodsi4_ep>
 608:	a2 1b       	sub	r26, r18
 60a:	b3 0b       	sbc	r27, r19
 60c:	e4 0b       	sbc	r30, r20
 60e:	f5 0b       	sbc	r31, r21

00000610 <__udivmodsi4_ep>:
 610:	66 1f       	adc	r22, r22
 612:	77 1f       	adc	r23, r23
 614:	88 1f       	adc	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	1a 94       	dec	r1
 61a:	69 f7       	brne	.-38     	; 0x5f6 <__udivmodsi4_loop>
 61c:	60 95       	com	r22
 61e:	70 95       	com	r23
 620:	80 95       	com	r24
 622:	90 95       	com	r25
 624:	9b 01       	movw	r18, r22
 626:	ac 01       	movw	r20, r24
 628:	bd 01       	movw	r22, r26
 62a:	cf 01       	movw	r24, r30
 62c:	08 95       	ret

0000062e <__umulhisi3>:
 62e:	a2 9f       	mul	r26, r18
 630:	b0 01       	movw	r22, r0
 632:	b3 9f       	mul	r27, r19
 634:	c0 01       	movw	r24, r0
 636:	a3 9f       	mul	r26, r19
 638:	70 0d       	add	r23, r0
 63a:	81 1d       	adc	r24, r1
 63c:	11 24       	eor	r1, r1
 63e:	91 1d       	adc	r25, r1
 640:	b2 9f       	mul	r27, r18
 642:	70 0d       	add	r23, r0
 644:	81 1d       	adc	r24, r1
 646:	11 24       	eor	r1, r1
 648:	91 1d       	adc	r25, r1
 64a:	08 95       	ret

0000064c <_exit>:
 64c:	f8 94       	cli

0000064e <__stop_program>:
 64e:	ff cf       	rjmp	.-2      	; 0x64e <__stop_program>
