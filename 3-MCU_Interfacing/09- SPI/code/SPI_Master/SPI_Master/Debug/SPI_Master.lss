
SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ed  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000635  00000000  00000000  00000911  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c8  00000000  00000000  00000f46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001210  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000351  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000016e  00000000  00000000  000015f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001767  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
   8:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
   c:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  10:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  14:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  18:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  1c:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  20:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  24:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  28:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  2c:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  30:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  34:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  38:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  3c:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  40:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  44:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  48:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  4c:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  50:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  54:	56 00       	.word	0x0056	; ????
  56:	5a 00       	.word	0x005a	; ????
  58:	5e 00       	.word	0x005e	; ????
  5a:	62 00       	.word	0x0062	; ????
  5c:	66 00       	.word	0x0066	; ????
  5e:	6b 00       	.word	0x006b	; ????
  60:	70 00       	.word	0x0070	; ????

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61
  6e:	0e 94 3d 00 	call	0x7a	; 0x7a <main>
  72:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

00000076 <__bad_interrupt>:
  76:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007a <main>:

#include "SPI.h"

int main(void)
{
	SPI_Master_init(Fosc_16) ;
  7a:	81 e0       	ldi	r24, 0x01	; 1
  7c:	0e 94 46 00 	call	0x8c	; 0x8c <SPI_Master_init>
	SPI_Transmit_Char(3) ;  
  80:	83 e0       	ldi	r24, 0x03	; 3
  82:	0e 94 75 00 	call	0xea	; 0xea <SPI_Transmit_Char>
}
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	08 95       	ret

0000008c <SPI_Master_init>:
	
	// configure MISO as an output
	DDRB_REG |= (1 << MISO) ;
	
	// Enable SPI
	SPCR |= (1 << SPE) ; 
  8c:	e8 2f       	mov	r30, r24
  8e:	87 b3       	in	r24, 0x17	; 23
  90:	80 6b       	ori	r24, 0xB0	; 176
  92:	87 bb       	out	0x17, r24	; 23
  94:	c4 9a       	sbi	0x18, 4	; 24
  96:	be 98       	cbi	0x17, 6	; 23
  98:	8e 2f       	mov	r24, r30
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	87 30       	cpi	r24, 0x07	; 7
  9e:	91 05       	cpc	r25, r1
  a0:	18 f5       	brcc	.+70     	; 0xe8 <SPI_Master_init+0x5c>
  a2:	fc 01       	movw	r30, r24
  a4:	e6 5d       	subi	r30, 0xD6	; 214
  a6:	ff 4f       	sbci	r31, 0xFF	; 255
  a8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__tablejump2__>
  ac:	8d b1       	in	r24, 0x0d	; 13
  ae:	80 65       	ori	r24, 0x50	; 80
  b0:	8d b9       	out	0x0d, r24	; 13
  b2:	08 95       	ret
  b4:	8d b1       	in	r24, 0x0d	; 13
  b6:	81 65       	ori	r24, 0x51	; 81
  b8:	8d b9       	out	0x0d, r24	; 13
  ba:	08 95       	ret
  bc:	8d b1       	in	r24, 0x0d	; 13
  be:	82 65       	ori	r24, 0x52	; 82
  c0:	8d b9       	out	0x0d, r24	; 13
  c2:	08 95       	ret
  c4:	8d b1       	in	r24, 0x0d	; 13
  c6:	83 65       	ori	r24, 0x53	; 83
  c8:	8d b9       	out	0x0d, r24	; 13
  ca:	08 95       	ret
  cc:	8d b1       	in	r24, 0x0d	; 13
  ce:	80 65       	ori	r24, 0x50	; 80
  d0:	8d b9       	out	0x0d, r24	; 13
  d2:	70 9a       	sbi	0x0e, 0	; 14
  d4:	08 95       	ret
  d6:	8d b1       	in	r24, 0x0d	; 13
  d8:	81 65       	ori	r24, 0x51	; 81
  da:	8d b9       	out	0x0d, r24	; 13
  dc:	70 9a       	sbi	0x0e, 0	; 14
  de:	08 95       	ret
  e0:	8d b1       	in	r24, 0x0d	; 13
  e2:	82 65       	ori	r24, 0x52	; 82
  e4:	8d b9       	out	0x0d, r24	; 13
  e6:	70 9a       	sbi	0x0e, 0	; 14
  e8:	08 95       	ret

000000ea <SPI_Transmit_Char>:
Description : function to transmit character data over SPI 
inputs		: character data to be sent 
outputs		: none
*/
void SPI_Transmit_Char (unsigned char data) {
	PORTB_REG &= ~(1<<SS);			/* Make low on SS pin */
  ea:	c4 98       	cbi	0x18, 4	; 24
	SPDR = data ; 
  ec:	8f b9       	out	0x0f, r24	; 15
	while((SPSR & (1<<SPIF)) == 0);  // wait until transmission is complete
  ee:	77 9b       	sbis	0x0e, 7	; 14
  f0:	fe cf       	rjmp	.-4      	; 0xee <SPI_Transmit_Char+0x4>

}
  f2:	08 95       	ret

000000f4 <__tablejump2__>:
  f4:	ee 0f       	add	r30, r30
  f6:	ff 1f       	adc	r31, r31
  f8:	05 90       	lpm	r0, Z+
  fa:	f4 91       	lpm	r31, Z
  fc:	e0 2d       	mov	r30, r0
  fe:	09 94       	ijmp

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
