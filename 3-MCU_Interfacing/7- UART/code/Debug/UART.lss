
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ca  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000668  00000000  00000000  00000ada  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ed  00000000  00000000  00001142  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001430  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039b  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000018a  00000000  00000000  00001863  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000019ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 */ 

#include "UART.h"

int main()
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	2a 97       	sbiw	r28, 0x0a	; 10
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
	
	UART_init(9600 , _1_BIT , _8_BITS) ; 
  80:	43 e0       	ldi	r20, 0x03	; 3
  82:	60 e0       	ldi	r22, 0x00	; 0
  84:	80 e8       	ldi	r24, 0x80	; 128
  86:	95 e2       	ldi	r25, 0x25	; 37
  88:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_init>
	char name [10] ;
	char key_pressed ; 
	char counter = 0 ; 
  8c:	00 e0       	ldi	r16, 0x00	; 0
  8e:	7e 01       	movw	r14, r28
  90:	8b e0       	ldi	r24, 0x0B	; 11
  92:	e8 0e       	add	r14, r24
  94:	f1 1c       	adc	r15, r1
	char loop_iterator = 0 ; 
	while (1) {
		key_pressed = UART_Receive_Char() ;
  96:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <UART_Receive_Char>
  9a:	18 2f       	mov	r17, r24
		UART_Transmit_Char(key_pressed) ; 
  9c:	0e 94 ba 00 	call	0x174	; 0x174 <UART_Transmit_Char>
		if ( (key_pressed != 32) && (key_pressed >= 65) && (key_pressed <= 122) ) {				// user doesn't press a space button yet
  a0:	8f eb       	ldi	r24, 0xBF	; 191
  a2:	81 0f       	add	r24, r17
  a4:	8a 33       	cpi	r24, 0x3A	; 58
  a6:	48 f4       	brcc	.+18     	; 0xba <main+0x4e>
			name[counter] = key_pressed ; 
  a8:	e1 e0       	ldi	r30, 0x01	; 1
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	ec 0f       	add	r30, r28
  ae:	fd 1f       	adc	r31, r29
  b0:	e0 0f       	add	r30, r16
  b2:	f1 1d       	adc	r31, r1
  b4:	10 83       	st	Z, r17
			counter ++ ; 
  b6:	0f 5f       	subi	r16, 0xFF	; 255
  b8:	ee cf       	rjmp	.-36     	; 0x96 <main+0x2a>
		} 
		else if (key_pressed == 32) {														// user enters space key to finish entering command
  ba:	10 32       	cpi	r17, 0x20	; 32
  bc:	61 f7       	brne	.-40     	; 0x96 <main+0x2a>
			UART_Transmit_String(name) ; 
  be:	ce 01       	movw	r24, r28
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	0e 94 be 00 	call	0x17c	; 0x17c <UART_Transmit_String>
  c6:	fe 01       	movw	r30, r28
  c8:	31 96       	adiw	r30, 0x01	; 1
			counter = 0 ;
			for (loop_iterator=0 ; loop_iterator<10 ; loop_iterator++) {
				name[loop_iterator] = 0 ; 
  ca:	11 92       	st	Z+, r1
			counter ++ ; 
		} 
		else if (key_pressed == 32) {														// user enters space key to finish entering command
			UART_Transmit_String(name) ; 
			counter = 0 ;
			for (loop_iterator=0 ; loop_iterator<10 ; loop_iterator++) {
  cc:	ee 15       	cp	r30, r14
  ce:	ff 05       	cpc	r31, r15
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x5e>
			name[counter] = key_pressed ; 
			counter ++ ; 
		} 
		else if (key_pressed == 32) {														// user enters space key to finish entering command
			UART_Transmit_String(name) ; 
			counter = 0 ;
  d2:	00 e0       	ldi	r16, 0x00	; 0
  d4:	e0 cf       	rjmp	.-64     	; 0x96 <main+0x2a>

000000d6 <UART_init>:
/*
Description : The function initializes UART module with the specified baud rate , data frame
inputs		: baud rate , no of stop bits required (_1_BIT , _2_BITS) , data size required (_5_BITS , _6_BITS , _7_BITS , _8_BITS)
outputs		: none
*/
void UART_init (unsigned int baud_rate , EN_STOP_BITS stop_bits , EN_DATA_SIZE data_size) {
  d6:	9c 01       	movw	r18, r24
	/* Turn on transmission and reception */
	UART_UCSRB |= (1 << 4) | (1 << 3) ; 
  d8:	8a b1       	in	r24, 0x0a	; 10
  da:	88 61       	ori	r24, 0x18	; 24
  dc:	8a b9       	out	0x0a, r24	; 10
	
	/*  setting frame format */
	
	if (stop_bits == _1_BIT){
  de:	61 11       	cpse	r22, r1
  e0:	14 c0       	rjmp	.+40     	; 0x10a <UART_init+0x34>
		switch (data_size) {
  e2:	41 30       	cpi	r20, 0x01	; 1
  e4:	49 f0       	breq	.+18     	; 0xf8 <UART_init+0x22>
  e6:	28 f0       	brcs	.+10     	; 0xf2 <UART_init+0x1c>
  e8:	42 30       	cpi	r20, 0x02	; 2
  ea:	49 f0       	breq	.+18     	; 0xfe <UART_init+0x28>
  ec:	43 30       	cpi	r20, 0x03	; 3
  ee:	51 f0       	breq	.+20     	; 0x104 <UART_init+0x2e>
  f0:	21 c0       	rjmp	.+66     	; 0x134 <UART_init+0x5e>
			case _5_BITS : 
				UART_UCSRC = 0b10000000 ; 
  f2:	80 e8       	ldi	r24, 0x80	; 128
  f4:	80 bd       	out	0x20, r24	; 32
				break;
  f6:	1e c0       	rjmp	.+60     	; 0x134 <UART_init+0x5e>
				
			case _6_BITS :
				UART_UCSRC = 0b10000010 ;
  f8:	82 e8       	ldi	r24, 0x82	; 130
  fa:	80 bd       	out	0x20, r24	; 32
				break;
  fc:	1b c0       	rjmp	.+54     	; 0x134 <UART_init+0x5e>
				
			case _7_BITS :
				UART_UCSRC = 0b10000100 ;
  fe:	84 e8       	ldi	r24, 0x84	; 132
 100:	80 bd       	out	0x20, r24	; 32
				break;
 102:	18 c0       	rjmp	.+48     	; 0x134 <UART_init+0x5e>
				
			case _8_BITS :
				UART_UCSRC = 0b10000110 ;
 104:	86 e8       	ldi	r24, 0x86	; 134
 106:	80 bd       	out	0x20, r24	; 32
				break;	
 108:	15 c0       	rjmp	.+42     	; 0x134 <UART_init+0x5e>
		}
	}
	else if (stop_bits == _2_BITS) {
 10a:	61 30       	cpi	r22, 0x01	; 1
 10c:	99 f4       	brne	.+38     	; 0x134 <UART_init+0x5e>
		switch (data_size) {
 10e:	41 30       	cpi	r20, 0x01	; 1
 110:	49 f0       	breq	.+18     	; 0x124 <UART_init+0x4e>
 112:	28 f0       	brcs	.+10     	; 0x11e <UART_init+0x48>
 114:	42 30       	cpi	r20, 0x02	; 2
 116:	49 f0       	breq	.+18     	; 0x12a <UART_init+0x54>
 118:	43 30       	cpi	r20, 0x03	; 3
 11a:	51 f0       	breq	.+20     	; 0x130 <UART_init+0x5a>
 11c:	0b c0       	rjmp	.+22     	; 0x134 <UART_init+0x5e>
			case _5_BITS :
				UART_UCSRC = 0b10001000 ;
 11e:	88 e8       	ldi	r24, 0x88	; 136
 120:	80 bd       	out	0x20, r24	; 32
				break;
 122:	08 c0       	rjmp	.+16     	; 0x134 <UART_init+0x5e>
			
			case _6_BITS :
				UART_UCSRC = 0b10001010 ;
 124:	8a e8       	ldi	r24, 0x8A	; 138
 126:	80 bd       	out	0x20, r24	; 32
				break;
 128:	05 c0       	rjmp	.+10     	; 0x134 <UART_init+0x5e>
			
			case _7_BITS :
				UART_UCSRC = 0b10001100 ;
 12a:	8c e8       	ldi	r24, 0x8C	; 140
 12c:	80 bd       	out	0x20, r24	; 32
				break;
 12e:	02 c0       	rjmp	.+4      	; 0x134 <UART_init+0x5e>
			
			case _8_BITS :
				UART_UCSRC = 0b10001110 ;
 130:	8e e8       	ldi	r24, 0x8E	; 142
 132:	80 bd       	out	0x20, r24	; 32
				break;
		}
	}
	unsigned int baud_prescale ; 
	baud_prescale = ((F_CPU / (16UL*baud_rate))-1) ; 
 134:	c9 01       	movw	r24, r18
 136:	a0 e0       	ldi	r26, 0x00	; 0
 138:	b0 e0       	ldi	r27, 0x00	; 0
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	aa 1f       	adc	r26, r26
 140:	bb 1f       	adc	r27, r27
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	aa 1f       	adc	r26, r26
 148:	bb 1f       	adc	r27, r27
 14a:	9c 01       	movw	r18, r24
 14c:	ad 01       	movw	r20, r26
 14e:	22 0f       	add	r18, r18
 150:	33 1f       	adc	r19, r19
 152:	44 1f       	adc	r20, r20
 154:	55 1f       	adc	r21, r21
 156:	22 0f       	add	r18, r18
 158:	33 1f       	adc	r19, r19
 15a:	44 1f       	adc	r20, r20
 15c:	55 1f       	adc	r21, r21
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	72 e1       	ldi	r23, 0x12	; 18
 162:	8a e7       	ldi	r24, 0x7A	; 122
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__udivmodsi4>
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	31 09       	sbc	r19, r1
	UART_UBRRL = baud_prescale ; 
 16e:	29 b9       	out	0x09, r18	; 9
	UART_UBRRH = baud_prescale >> 8 ; 
 170:	30 bd       	out	0x20, r19	; 32
 172:	08 95       	ret

00000174 <UART_Transmit_Char>:
	/*
	 (UDRE) Flag indicates whether the transmit buffer is ready to receive new data. 
	 This bit is set when the transmit buffer is empty, and cleared when the transmit buffer
	 contains data to be transmitted that has not yet been moved into the Shift Register
	*/
 	while ( (UART_UCSRA & (1<<5)) == 0) ;	/* Wait for empty transmit buffer*/
 174:	5d 9b       	sbis	0x0b, 5	; 11
 176:	fe cf       	rjmp	.-4      	; 0x174 <UART_Transmit_Char>
 	UART_UDR = data ;
 178:	8c b9       	out	0x0c, r24	; 12
 17a:	08 95       	ret

0000017c <UART_Transmit_String>:
/*
Description : The function for transmitting a string as a character by character.
inputs		: string to be transmitted
outputs		: none
*/
void UART_Transmit_String (unsigned char* str) {
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	fc 01       	movw	r30, r24
	unsigned char counter = 0 ; 
	while (str[counter] != 0) {
 184:	80 81       	ld	r24, Z
 186:	88 23       	and	r24, r24
 188:	59 f0       	breq	.+22     	; 0x1a0 <UART_Transmit_String+0x24>
 18a:	8f 01       	movw	r16, r30
 18c:	c0 e0       	ldi	r28, 0x00	; 0
		UART_Transmit_Char(str[counter]) ; 
 18e:	0e 94 ba 00 	call	0x174	; 0x174 <UART_Transmit_Char>
		counter ++ ; 
 192:	cf 5f       	subi	r28, 0xFF	; 255
inputs		: string to be transmitted
outputs		: none
*/
void UART_Transmit_String (unsigned char* str) {
	unsigned char counter = 0 ; 
	while (str[counter] != 0) {
 194:	f8 01       	movw	r30, r16
 196:	ec 0f       	add	r30, r28
 198:	f1 1d       	adc	r31, r1
 19a:	80 81       	ld	r24, Z
 19c:	81 11       	cpse	r24, r1
 19e:	f7 cf       	rjmp	.-18     	; 0x18e <UART_Transmit_String+0x12>
		UART_Transmit_Char(str[counter]) ; 
		counter ++ ; 
	}
}
 1a0:	cf 91       	pop	r28
 1a2:	1f 91       	pop	r17
 1a4:	0f 91       	pop	r16
 1a6:	08 95       	ret

000001a8 <UART_Receive_Char>:
			   before reading the buffer and returning the value
inputs		: none
outputs		: received data
*/
unsigned char UART_Receive_Char (void) {
	while ( (UART_UCSRA & (1<<7)) == 0) ;	/* Wait till data is received */
 1a8:	5f 9b       	sbis	0x0b, 7	; 11
 1aa:	fe cf       	rjmp	.-4      	; 0x1a8 <UART_Receive_Char>
	return UART_UDR ; 
 1ac:	8c b1       	in	r24, 0x0c	; 12
 1ae:	08 95       	ret

000001b0 <__udivmodsi4>:
 1b0:	a1 e2       	ldi	r26, 0x21	; 33
 1b2:	1a 2e       	mov	r1, r26
 1b4:	aa 1b       	sub	r26, r26
 1b6:	bb 1b       	sub	r27, r27
 1b8:	fd 01       	movw	r30, r26
 1ba:	0d c0       	rjmp	.+26     	; 0x1d6 <__udivmodsi4_ep>

000001bc <__udivmodsi4_loop>:
 1bc:	aa 1f       	adc	r26, r26
 1be:	bb 1f       	adc	r27, r27
 1c0:	ee 1f       	adc	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	a2 17       	cp	r26, r18
 1c6:	b3 07       	cpc	r27, r19
 1c8:	e4 07       	cpc	r30, r20
 1ca:	f5 07       	cpc	r31, r21
 1cc:	20 f0       	brcs	.+8      	; 0x1d6 <__udivmodsi4_ep>
 1ce:	a2 1b       	sub	r26, r18
 1d0:	b3 0b       	sbc	r27, r19
 1d2:	e4 0b       	sbc	r30, r20
 1d4:	f5 0b       	sbc	r31, r21

000001d6 <__udivmodsi4_ep>:
 1d6:	66 1f       	adc	r22, r22
 1d8:	77 1f       	adc	r23, r23
 1da:	88 1f       	adc	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	1a 94       	dec	r1
 1e0:	69 f7       	brne	.-38     	; 0x1bc <__udivmodsi4_loop>
 1e2:	60 95       	com	r22
 1e4:	70 95       	com	r23
 1e6:	80 95       	com	r24
 1e8:	90 95       	com	r25
 1ea:	9b 01       	movw	r18, r22
 1ec:	ac 01       	movw	r20, r24
 1ee:	bd 01       	movw	r22, r26
 1f0:	cf 01       	movw	r24, r30
 1f2:	08 95       	ret

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
