
Blink_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000316  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000036a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000036a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ace  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d0  00000000  00000000  00000f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000719  00000000  00000000  0000164e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00001d68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ff  00000000  00000000  00001ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000058b  00000000  00000000  000022a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002832  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 00 	call	0x82	; 0x82 <main>
  64:	0c 94 89 01 	jmp	0x312	; 0x312 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LED_init>:

void LED_init (uint8 PortNumber , uint8 PinNumber) {
	DIO_SetPinDirection (PortNumber , PinNumber , OUTPUT) ; 
}
void LED_ON (uint8 PortNumber , uint8 PinNumber) {
	DIO_SetPinValue (PortNumber , PinNumber , HIGH) ;
  6c:	41 e0       	ldi	r20, 0x01	; 1
  6e:	0e 94 56 00 	call	0xac	; 0xac <DIO_SetPinDirection>
  72:	08 95       	ret

00000074 <LED_OFF>:
}
void LED_OFF (uint8 PortNumber , uint8 PinNumber) {
	DIO_SetPinValue (PortNumber , PinNumber , LOW) ;
  74:	40 e0       	ldi	r20, 0x00	; 0
  76:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_SetPinValue>
  7a:	08 95       	ret

0000007c <LED_TOGGLE>:
}
void LED_TOGGLE (uint8 PortNumber , uint8 PinNumber) {
	DIO_TogglePinValue (PortNumber , PinNumber) ; 
  7c:	0e 94 40 01 	call	0x280	; 0x280 <DIO_TogglePinValue>
  80:	08 95       	ret

00000082 <main>:
#include "D:\Sprints iCamp\5- MCU interfacing\Blink_LED\Blink_LED\MCAL\TIMER\TIMER.h"

int main(void)
{
	
	LED_init(portA , 0) ;
  82:	60 e0       	ldi	r22, 0x00	; 0
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	0e 94 36 00 	call	0x6c	; 0x6c <LED_init>
	LED_OFF (portA , 0) ; 
  8a:	60 e0       	ldi	r22, 0x00	; 0
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	0e 94 3a 00 	call	0x74	; 0x74 <LED_OFF>
	TIMER1_init () ; 
  92:	0e 94 74 01 	call	0x2e8	; 0x2e8 <TIMER1_init>
	
	while(1)
	{
		//If flag is set toggle the led
		while(TIMER1_end() == 0);// wait till the timer overflow flag is SET
  96:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <TIMER1_end>
  9a:	88 23       	and	r24, r24
  9c:	e1 f3       	breq	.-8      	; 0x96 <main+0x14>
		LED_TOGGLE(portA , 0) ; 
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	0e 94 3e 00 	call	0x7c	; 0x7c <LED_TOGGLE>
		TIMER1_reset() ; 
  a6:	0e 94 81 01 	call	0x302	; 0x302 <TIMER1_reset>
	}
  aa:	f5 cf       	rjmp	.-22     	; 0x96 <main+0x14>

000000ac <DIO_SetPinDirection>:
 *  Author: Mahmoud Ayoub
 */ 
#include "DIO_Config.h"

void DIO_SetPinDirection (uint8 PortNumber , uint8 PinNumber , uint8 Direction) {
	switch (PortNumber) {
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	11 f1       	breq	.+68     	; 0xf4 <DIO_SetPinDirection+0x48>
  b0:	30 f0       	brcs	.+12     	; 0xbe <DIO_SetPinDirection+0x12>
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	d1 f1       	breq	.+116    	; 0x12a <DIO_SetPinDirection+0x7e>
  b6:	83 30       	cpi	r24, 0x03	; 3
  b8:	09 f4       	brne	.+2      	; 0xbc <DIO_SetPinDirection+0x10>
  ba:	52 c0       	rjmp	.+164    	; 0x160 <DIO_SetPinDirection+0xb4>
  bc:	08 95       	ret
		case portA :
			if (Direction == OUTPUT) {
  be:	41 30       	cpi	r20, 0x01	; 1
  c0:	59 f4       	brne	.+22     	; 0xd8 <DIO_SetPinDirection+0x2c>
				SET_BIT(DDRA_REG,PinNumber) ; 
  c2:	2a b3       	in	r18, 0x1a	; 26
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_SetPinDirection+0x22>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_SetPinDirection+0x1e>
  d2:	82 2b       	or	r24, r18
  d4:	8a bb       	out	0x1a, r24	; 26
  d6:	08 95       	ret
			}
			else if (Direction == INPUT) {
  d8:	41 11       	cpse	r20, r1
  da:	5c c0       	rjmp	.+184    	; 0x194 <DIO_SetPinDirection+0xe8>
				CLEAR_BIT(DDRA_REG,PinNumber) ; 
  dc:	2a b3       	in	r18, 0x1a	; 26
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_SetPinDirection+0x3c>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_SetPinDirection+0x38>
  ec:	80 95       	com	r24
  ee:	82 23       	and	r24, r18
  f0:	8a bb       	out	0x1a, r24	; 26
  f2:	08 95       	ret
			}
		break;
			
		case portB :
			if (Direction == OUTPUT) {
  f4:	41 30       	cpi	r20, 0x01	; 1
  f6:	59 f4       	brne	.+22     	; 0x10e <DIO_SetPinDirection+0x62>
				SET_BIT(DDRB_REG,PinNumber) ;
  f8:	27 b3       	in	r18, 0x17	; 23
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_SetPinDirection+0x58>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_SetPinDirection+0x54>
 108:	82 2b       	or	r24, r18
 10a:	87 bb       	out	0x17, r24	; 23
 10c:	08 95       	ret
			}
			else if (Direction == INPUT) {
 10e:	41 11       	cpse	r20, r1
 110:	41 c0       	rjmp	.+130    	; 0x194 <DIO_SetPinDirection+0xe8>
				CLEAR_BIT(DDRB_REG,PinNumber) ;
 112:	27 b3       	in	r18, 0x17	; 23
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_SetPinDirection+0x72>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_SetPinDirection+0x6e>
 122:	80 95       	com	r24
 124:	82 23       	and	r24, r18
 126:	87 bb       	out	0x17, r24	; 23
 128:	08 95       	ret
			}
		break;
		
		case portC :
			if (Direction == OUTPUT) {
 12a:	41 30       	cpi	r20, 0x01	; 1
 12c:	59 f4       	brne	.+22     	; 0x144 <DIO_SetPinDirection+0x98>
				SET_BIT(DDRC_REG,PinNumber) ;
 12e:	24 b3       	in	r18, 0x14	; 20
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_SetPinDirection+0x8e>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_SetPinDirection+0x8a>
 13e:	82 2b       	or	r24, r18
 140:	84 bb       	out	0x14, r24	; 20
 142:	08 95       	ret
			}
			else if (Direction == INPUT) {
 144:	41 11       	cpse	r20, r1
 146:	26 c0       	rjmp	.+76     	; 0x194 <DIO_SetPinDirection+0xe8>
				CLEAR_BIT(DDRC_REG,PinNumber) ;
 148:	24 b3       	in	r18, 0x14	; 20
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_SetPinDirection+0xa8>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_SetPinDirection+0xa4>
 158:	80 95       	com	r24
 15a:	82 23       	and	r24, r18
 15c:	84 bb       	out	0x14, r24	; 20
 15e:	08 95       	ret
			}
			break;	
			
		case portD :
			if (Direction == OUTPUT) {
 160:	41 30       	cpi	r20, 0x01	; 1
 162:	59 f4       	brne	.+22     	; 0x17a <DIO_SetPinDirection+0xce>
				SET_BIT(DDRD_REG,PinNumber) ;
 164:	21 b3       	in	r18, 0x11	; 17
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_SetPinDirection+0xc4>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_SetPinDirection+0xc0>
 174:	82 2b       	or	r24, r18
 176:	81 bb       	out	0x11, r24	; 17
 178:	08 95       	ret
			}
			else if (Direction == INPUT) {
 17a:	41 11       	cpse	r20, r1
 17c:	0b c0       	rjmp	.+22     	; 0x194 <DIO_SetPinDirection+0xe8>
				CLEAR_BIT(DDRD_REG,PinNumber) ;
 17e:	21 b3       	in	r18, 0x11	; 17
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_SetPinDirection+0xde>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_SetPinDirection+0xda>
 18e:	80 95       	com	r24
 190:	82 23       	and	r24, r18
 192:	81 bb       	out	0x11, r24	; 17
 194:	08 95       	ret

00000196 <DIO_SetPinValue>:
		break;	
	}
}

void DIO_SetPinValue (uint8 PortNumber , uint8 PinNumber , uint8 Value) {
	switch (PortNumber) {
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	11 f1       	breq	.+68     	; 0x1de <DIO_SetPinValue+0x48>
 19a:	30 f0       	brcs	.+12     	; 0x1a8 <DIO_SetPinValue+0x12>
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	d1 f1       	breq	.+116    	; 0x214 <DIO_SetPinValue+0x7e>
 1a0:	83 30       	cpi	r24, 0x03	; 3
 1a2:	09 f4       	brne	.+2      	; 0x1a6 <DIO_SetPinValue+0x10>
 1a4:	52 c0       	rjmp	.+164    	; 0x24a <DIO_SetPinValue+0xb4>
 1a6:	08 95       	ret
		case portA :
			if (Value == 1) {
 1a8:	41 30       	cpi	r20, 0x01	; 1
 1aa:	59 f4       	brne	.+22     	; 0x1c2 <DIO_SetPinValue+0x2c>
				SET_BIT(PORTA_REG,PinNumber) ;
 1ac:	2b b3       	in	r18, 0x1b	; 27
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_SetPinValue+0x22>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_SetPinValue+0x1e>
 1bc:	82 2b       	or	r24, r18
 1be:	8b bb       	out	0x1b, r24	; 27
 1c0:	08 95       	ret
			}
			else if (Value == 0) {
 1c2:	41 11       	cpse	r20, r1
 1c4:	5c c0       	rjmp	.+184    	; 0x27e <DIO_SetPinValue+0xe8>
				CLEAR_BIT(PORTA_REG,PinNumber) ;
 1c6:	2b b3       	in	r18, 0x1b	; 27
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_SetPinValue+0x3c>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_SetPinValue+0x38>
 1d6:	80 95       	com	r24
 1d8:	82 23       	and	r24, r18
 1da:	8b bb       	out	0x1b, r24	; 27
 1dc:	08 95       	ret
			}
		break;
		
		case portB :
			if (Value == 1) {
 1de:	41 30       	cpi	r20, 0x01	; 1
 1e0:	59 f4       	brne	.+22     	; 0x1f8 <DIO_SetPinValue+0x62>
				SET_BIT(PORTB_REG,PinNumber) ;
 1e2:	28 b3       	in	r18, 0x18	; 24
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_SetPinValue+0x58>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_SetPinValue+0x54>
 1f2:	82 2b       	or	r24, r18
 1f4:	88 bb       	out	0x18, r24	; 24
 1f6:	08 95       	ret
			}
			else if (Value == 0) {
 1f8:	41 11       	cpse	r20, r1
 1fa:	41 c0       	rjmp	.+130    	; 0x27e <DIO_SetPinValue+0xe8>
				CLEAR_BIT(PORTB_REG,PinNumber) ;
 1fc:	28 b3       	in	r18, 0x18	; 24
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_SetPinValue+0x72>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_SetPinValue+0x6e>
 20c:	80 95       	com	r24
 20e:	82 23       	and	r24, r18
 210:	88 bb       	out	0x18, r24	; 24
 212:	08 95       	ret
			}
		break;
		
		case portC :
			if (Value == 1) {
 214:	41 30       	cpi	r20, 0x01	; 1
 216:	59 f4       	brne	.+22     	; 0x22e <DIO_SetPinValue+0x98>
				SET_BIT(PORTC_REG,PinNumber) ;
 218:	25 b3       	in	r18, 0x15	; 21
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_SetPinValue+0x8e>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_SetPinValue+0x8a>
 228:	82 2b       	or	r24, r18
 22a:	85 bb       	out	0x15, r24	; 21
 22c:	08 95       	ret
			}
			else if (Value == 0) {
 22e:	41 11       	cpse	r20, r1
 230:	26 c0       	rjmp	.+76     	; 0x27e <DIO_SetPinValue+0xe8>
				CLEAR_BIT(PORTC_REG,PinNumber) ;
 232:	25 b3       	in	r18, 0x15	; 21
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_SetPinValue+0xa8>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_SetPinValue+0xa4>
 242:	80 95       	com	r24
 244:	82 23       	and	r24, r18
 246:	85 bb       	out	0x15, r24	; 21
 248:	08 95       	ret
			}
		break;
		
		case portD :
			if (Value == 1) {
 24a:	41 30       	cpi	r20, 0x01	; 1
 24c:	59 f4       	brne	.+22     	; 0x264 <DIO_SetPinValue+0xce>
				SET_BIT(PORTD_REG,PinNumber) ;
 24e:	22 b3       	in	r18, 0x12	; 18
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_SetPinValue+0xc4>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_SetPinValue+0xc0>
 25e:	82 2b       	or	r24, r18
 260:	82 bb       	out	0x12, r24	; 18
 262:	08 95       	ret
			}
			else if (Value == 0) {
 264:	41 11       	cpse	r20, r1
 266:	0b c0       	rjmp	.+22     	; 0x27e <DIO_SetPinValue+0xe8>
				CLEAR_BIT(PORTD_REG,PinNumber) ;
 268:	22 b3       	in	r18, 0x12	; 18
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_SetPinValue+0xde>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_SetPinValue+0xda>
 278:	80 95       	com	r24
 27a:	82 23       	and	r24, r18
 27c:	82 bb       	out	0x12, r24	; 18
 27e:	08 95       	ret

00000280 <DIO_TogglePinValue>:
			}
		break;
	}	
}
void DIO_TogglePinValue (uint8 PortNumber , uint8 PinNumber) {
	switch (PortNumber) {
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	89 f0       	breq	.+34     	; 0x2a6 <DIO_TogglePinValue+0x26>
 284:	28 f0       	brcs	.+10     	; 0x290 <DIO_TogglePinValue+0x10>
 286:	82 30       	cpi	r24, 0x02	; 2
 288:	c9 f0       	breq	.+50     	; 0x2bc <DIO_TogglePinValue+0x3c>
 28a:	83 30       	cpi	r24, 0x03	; 3
 28c:	11 f1       	breq	.+68     	; 0x2d2 <DIO_TogglePinValue+0x52>
 28e:	08 95       	ret
		case portA :
			TOGGLE_BIT(PORTA_REG , PinNumber) ; 
 290:	2b b3       	in	r18, 0x1b	; 27
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_TogglePinValue+0x1c>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_TogglePinValue+0x18>
 2a0:	82 27       	eor	r24, r18
 2a2:	8b bb       	out	0x1b, r24	; 27
			break ;
 2a4:	08 95       	ret
			
		case portB :
			TOGGLE_BIT(PORTB_REG , PinNumber) ;
 2a6:	28 b3       	in	r18, 0x18	; 24
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_TogglePinValue+0x32>
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	6a 95       	dec	r22
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_TogglePinValue+0x2e>
 2b6:	82 27       	eor	r24, r18
 2b8:	88 bb       	out	0x18, r24	; 24
			break ;
 2ba:	08 95       	ret
			
		case portC :
			TOGGLE_BIT(PORTC_REG , PinNumber) ;
 2bc:	25 b3       	in	r18, 0x15	; 21
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_TogglePinValue+0x48>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_TogglePinValue+0x44>
 2cc:	82 27       	eor	r24, r18
 2ce:	85 bb       	out	0x15, r24	; 21
			break ;
 2d0:	08 95       	ret
			
		case portD :
			TOGGLE_BIT(PORTD_REG , PinNumber) ;
 2d2:	22 b3       	in	r18, 0x12	; 18
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_TogglePinValue+0x5e>
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	6a 95       	dec	r22
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_TogglePinValue+0x5a>
 2e2:	82 27       	eor	r24, r18
 2e4:	82 bb       	out	0x12, r24	; 18
 2e6:	08 95       	ret

000002e8 <TIMER1_init>:
 *  Author: Mahmoud Ayoub
 */ 
#include "TIMER.h"

void TIMER1_init (void) {
	SET_BIT(TC1_Control_B_REG , 1) ;         //set the pre-scalar as 8   ,  freq = 1 MHz
 2e8:	8e b5       	in	r24, 0x2e	; 46
 2ea:	82 60       	ori	r24, 0x02	; 2
 2ec:	8e bd       	out	0x2e, r24	; 46
	TC1_Data_H_REG = 0x6D ;					// delay ticks = 65535 - (delay_ms * 1000 * 1) / 8 = 28035
 2ee:	8d e6       	ldi	r24, 0x6D	; 109
 2f0:	8d bd       	out	0x2d, r24	; 45
	TC1_Data_L_REG = 0x83 ;  
 2f2:	83 e8       	ldi	r24, 0x83	; 131
 2f4:	8c bd       	out	0x2c, r24	; 44
 2f6:	08 95       	ret

000002f8 <TIMER1_end>:
}
uint8 TIMER1_end (void) {
	while((TC1_Status_REG & (1<<2)) == 0);	// wait till the overflow of A flag is SET
 2f8:	08 b6       	in	r0, 0x38	; 56
 2fa:	02 fe       	sbrs	r0, 2
 2fc:	fd cf       	rjmp	.-6      	; 0x2f8 <TIMER1_end>
	return 1 ; 
}
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	08 95       	ret

00000302 <TIMER1_reset>:
void TIMER1_reset (void) {
	TC1_Data_H_REG = 0x6D ;
 302:	8d e6       	ldi	r24, 0x6D	; 109
 304:	8d bd       	out	0x2d, r24	; 45
	TC1_Data_L_REG = 0x83 ;
 306:	83 e8       	ldi	r24, 0x83	; 131
 308:	8c bd       	out	0x2c, r24	; 44
	SET_BIT (TC1_Status_REG , 2) ;   //clear timer1 overflow flag
 30a:	88 b7       	in	r24, 0x38	; 56
 30c:	84 60       	ori	r24, 0x04	; 4
 30e:	88 bf       	out	0x38, r24	; 56
 310:	08 95       	ret

00000312 <_exit>:
 312:	f8 94       	cli

00000314 <__stop_program>:
 314:	ff cf       	rjmp	.-2      	; 0x314 <__stop_program>
